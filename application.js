!function e(t,n,r){function a(l,u){if(!n[l]){if(!t[l]){var i="function"==typeof require&&require;if(!u&&i)return i(l,!0);if(o)return o(l,!0);var c=new Error("Cannot find module '"+l+"'");throw c.code="MODULE_NOT_FOUND",c}var s=n[l]={exports:{}};t[l][0].call(s.exports,function(e){var n=t[l][1][e];return a(n?n:e)},s,s.exports,e,t,n,r)}return n[l].exports}for(var o="function"==typeof require&&require,l=0;l<r.length;l++)a(r[l]);return a}({1:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=e("./components/layout"),i=r(u),c=e("./stores/post_store"),s=(r(c),function(e){function t(){a(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),l(t,[{key:"render",value:function(){return this.state={title:"Hello",author:"Nikolay Nemshilov",body:"blah blah blah",sidebar:"blah"},React.createElement(i["default"],{title:this.state.title,body:this.state.body,author:this.state.author,sidebar:this.state.sidebar})}}]),t}(React.Component));React.render(React.createElement(s,null),document.documentElement)},{"./components/layout":2,"./stores/post_store":3}],2:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return a(t,e),o(t,[{key:"render",value:function(){return React.createElement("html",null,React.createElement("head",null,React.createElement("title",null,"Hello"),React.createElement("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),React.createElement("link",{rel:"stylesheet",type:"text/css",href:"/application.css"})),React.createElement("body",null,React.createElement("header",null,React.createElement("div",{className:"paddings"},React.createElement("a",{href:"./",className:"logo"},"Nikolay.TheOsom"))),React.createElement("main",null,React.createElement("div",{className:"paddings"},React.createElement("article",null,this.props.body),React.createElement("aside",null,this.props.sidebar))),React.createElement("footer",null,React.createElement("div",{className:"paddings"},React.createElement("p",null,"Copyright (C) 2012-",(new Date).getFullYear()," Nikolay Nemshilov")))))}}]),t}(React.Component);n["default"]=l,t.exports=n["default"]},{}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("../utils/request"),u=r(l),i=function(){function e(){a(this,e),this.posts=[],this.all()}return o(e,[{key:"all",value:function(){var e=new u["default"]("./index.json");e.getJSON(function(e){console.log("data: ",e)})}}]),e}();n["default"]=i,t.exports=n["default"]},{"../utils/request":4}],4:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.url=t}return a(e,[{key:"get",value:function(e){var t=new XMLHttpRequest;t.open("GET",this.url,!0),t.onreadystatechange=function(){4==this.readyState&&200==this.status&&e(this.responseText)},t.send()}},{key:"getJSON",value:function(e){this.get(function(t){e(JSON.parse(t))})}}]),e}();n["default"]=o,t.exports=n["default"]},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,