!function e(t,n,r){function o(a,u){if(!n[a]){if(!t[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return o(n?n:e)},c,c.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=e("./components/router"),s=r(u),l=e("./components/layout"),c=r(l),f=e("./stores/pages_store"),p=r(f),v=function(e){function t(){o(this,t),null!=e&&e.apply(this,arguments)}return i(t,e),a(t,[{key:"render",value:function(){return React.createElement(c["default"],{body:"Some body, anybody!",sidebar:"Sidebar"})}}]),t}(React.Component);p["default"].inst().on("load",function(){s["default"].connect(v)})},{"./components/layout":4,"./components/router":8,"./stores/pages_store":10}],2:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],u=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),i(t,[{key:"render",value:function(){var e=this.props.date,t=e.getFullYear(),n=a[e.getMonth()],r=e.getDate();return t?React.createElement("div",{className:"date"},n," ",r,", ",t):null}}]),t}(React.Component);n["default"]=u,t.exports=n["default"]},{}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,i=t,a=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(a)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=i,n=a,r=!0}},s=e("../stores/pages_store"),l=r(s),c=e("./preview"),f=r(c),p=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.state={pages:l["default"].inst().pages}}return i(t,e),a(t,[{key:"render",value:function(){return React.createElement("div",{id:"pages"},this.renderPreviews())}},{key:"renderPreviews",value:function(){return this.recentPages().map(function(e){return React.createElement(f["default"],{page:e})})}},{key:"recentPages",value:function(){return this.state.pages.sort(function(e,t){return e.createdAt>t.createdAt?-1:1})}}]),t}(React.Component);n["default"]=p,t.exports=n["default"]},{"../stores/pages_store":10,"./preview":7}],4:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,i=t,a=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(a)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=i,n=a,r=!0}},s=e("./router"),l=r(s),c=e("../stores/settings"),f=r(c),p=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.state={title:f["default"].title,author:f["default"].author}}return i(t,e),a(t,[{key:"render",value:function(){return document.title=this.state.title,React.createElement("body",null,React.createElement("header",null,React.createElement("div",{className:"paddings"},React.createElement("a",{href:"/",className:"logo"},f["default"].title))),React.createElement("main",null,React.createElement("div",{className:"paddings"},React.createElement("article",null,React.createElement(l["default"].Handler,null)),React.createElement("aside",null,this.props.sidebar))),React.createElement("footer",null,React.createElement("div",{className:"paddings"},React.createElement("p",null,"Copyright (C) 2012-",(new Date).getFullYear()," ",f["default"].author))))}}]),t}(React.Component);n["default"]=p,t.exports=n["default"]},{"../stores/settings":11,"./router":8}],5:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),i(t,[{key:"render",value:function(){return React.createElement("div",{className:"locker"},React.createElement("div",{className:"spinner"}))}}]),t}(React.Component);n["default"]=a,t.exports=n["default"]},{}],6:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,i=t,a=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(a)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=i,n=a,r=!0}},s=e("../stores/pages_store"),l=r(s),c=e("./date"),f=r(c),p=e("./locker"),v=r(p),d=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this);var e=l["default"].find(document.location.pathname);this.state={page:e},e.on("load",this._pageLoaded.bind(this)),e.load()}return i(t,e),a(t,[{key:"render",value:function(){var e=this.state.page;return React.createElement("div",{className:"page"},React.createElement("h2",{className:"title"},React.createElement(f["default"],{date:e.createdAt}),e.title),React.createElement("p",null,e.body||e.extract),!e.body&&React.createElement(v["default"],null))}},{key:"_pageLoaded",value:function(){this.setState({loaded:!0})}}]),t}(React.Component);n["default"]=d,t.exports=n["default"]},{"../stores/pages_store":10,"./date":2,"./locker":5}],7:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=e("./date"),s=r(u),l=function(e){function t(){o(this,t),null!=e&&e.apply(this,arguments)}return i(t,e),a(t,[{key:"render",value:function(){var e=this.props.page;return React.createElement("div",{className:"page preview"},React.createElement("h2",{className:"title"},React.createElement(s["default"],{date:e.createdAt}),React.createElement("a",{href:e.path},e.title)),React.createElement("p",null,e.extract))}}]),t}(React.Component);n["default"]=l,t.exports=n["default"]},{"./date":2}],8:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var o=e("./index"),i=r(o),a=e("./page"),u=r(a),s=ReactRouter,l=s.Route;n["default"]={connect:function(e){var t=React.createElement(l,{handler:e,path:"/"},React.createElement(l,{path:"/",handler:i["default"]}),React.createElement(l,{path:"*",handler:u["default"]}));s.run(t,s.HistoryLocation,function(e){document.body.className="",React.render(React.createElement(e,null),document.body)})},Handler:s.RouteHandler},document.addEventListener("click",function(e){var t=e.target,n=t.getAttribute("href"),r=e.metaKey||e.altKey||e.ctrlKey||e.shiftKey;0!==e.button||r||"A"!==t.tagName||"/"!==n[0]||(e.preventDefault(),s.HistoryLocation.push(n))},!1),t.exports=n["default"]},{"./index":3,"./page":6}],9:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,i=t,a=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(a)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=i,n=a,r=!0}},s=e("events"),l=e("../utils/request"),c=r(l),f=function(e){function t(e){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this);for(var n in e)this[n]=e[n]}return i(t,e),a(t,[{key:"load",value:function(){new c["default"](this.file).get(function(e){this.body=e,this.emit("load")}.bind(this))}}]),t}(s.EventEmitter);n["default"]=f,t.exports=n["default"]},{"../utils/request":12,events:13}],10:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,i=t,a=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,i);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(a)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=i,n=a,r=!0}},s=e("events"),l=e("../utils/request"),c=r(l),f=e("./page"),p=r(f),v=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.pages=null,this.load()}return i(t,e),a(t,[{key:"load",value:function(){new c["default"]("/sitemap.xml").get(function(e,t){var n=t.responseXML.querySelectorAll("url");this.pages=[].slice.call(n).map(function(e){return new p["default"](this.extractData(e))}.bind(this)),this.emit("load")}.bind(this))}},{key:"extractData",value:function(e){var t={path:(e.querySelector("loc")||{}).textContent,createdAt:(e.querySelector("lastmod")||{}).textContent,file:(e.querySelector("fileloc")||{}).textContent,category:(e.querySelector("category")||{}).textContent,tags:(e.querySelector("tags")||{}).textContent,title:(e.querySelector("title")||{}).textContent,extract:(e.querySelector("extract")||{}).textContent};try{t.path=t.path.split(".com").pop()}catch(n){}try{t.tags=t.tags.split(",")}catch(n){}try{t.createdAt=new Date(t.createdAt)}catch(n){}return t}}],[{key:"inst",value:function(){return!this._inst&&(this._inst=new t),this._inst}},{key:"find",value:function(e){return this.inst().pages.filter(function(t){return t.path==e})[0]}}]),t}(s.EventEmitter);n["default"]=v,t.exports=n["default"]},{"../utils/request":12,"./page":9,events:13}],11:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]={title:"Nikolay.TheOsom",author:"Nikolay Nemshilov"},t.exports=n["default"]},{}],12:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t){r(this,e),this.url=t}return o(e,[{key:"get",value:function(e){var t=new XMLHttpRequest;t.open("GET",this.url,!0),t.onreadystatechange=function(){4===this.readyState&&this.status>=200&&this.status<300&&e(this.responseText,this)},t.send()}},{key:"getJSON",value:function(e){this.get(function(t){e(JSON.parse(t))})}}]),e}();n["default"]=i,t.exports=n["default"]},{}],13:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function i(e){return"number"==typeof e}function a(e){return"object"==typeof e&&null!==e}function u(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!i(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,i,s,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||a(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(n=this._events[e],u(n))return!1;if(o(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:for(r=arguments.length,i=new Array(r-1),s=1;r>s;s++)i[s-1]=arguments[s];n.apply(this,i)}else if(a(n)){for(r=arguments.length,i=new Array(r-1),s=1;r>s;s++)i[s-1]=arguments[s];for(l=n.slice(),r=l.length,s=0;r>s;s++)l[s].apply(this,i)}return!0},r.prototype.addListener=function(e,t){var n;if(!o(t))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?a(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,a(this._events[e])&&!this._events[e].warned){var n;n=u(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())}return this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function n(){this.removeListener(e,n),r||(r=!0,t.apply(this,arguments))}if(!o(t))throw TypeError("listener must be a function");var r=!1;return n.listener=t,this.on(e,n),this},r.prototype.removeListener=function(e,t){var n,r,i,u;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],i=n.length,r=-1,n===t||o(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(a(n)){for(u=i;u-->0;)if(n[u]===t||n[u].listener&&n[u].listener===t){r=u;break}if(0>r)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],o(n))this.removeListener(e,n);else for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.listenerCount=function(e,t){var n;return n=e._events&&e._events[t]?o(e._events[t])?1:e._events[t].length:0}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcGxpY2F0aW9uLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwxLCJtb2R1bGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9fcHJvdG9fXyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jb21wb25lbnRzUm91dGVyIiwiX2NvbXBvbmVudHNSb3V0ZXIyIiwiX2NvbXBvbmVudHNMYXlvdXQiLCJfY29tcG9uZW50c0xheW91dDIiLCJfc3RvcmVzUGFnZXNfc3RvcmUiLCJfc3RvcmVzUGFnZXNfc3RvcmUyIiwiQXBwIiwiX1JlYWN0JENvbXBvbmVudCIsInRoaXMiLCJhcHBseSIsImFyZ3VtZW50cyIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJzaWRlYmFyIiwiQ29tcG9uZW50IiwiaW5zdCIsIm9uIiwiY29ubmVjdCIsIi4vY29tcG9uZW50cy9sYXlvdXQiLCIuL2NvbXBvbmVudHMvcm91dGVyIiwiLi9zdG9yZXMvcGFnZXNfc3RvcmUiLDIsIm1vbnRocyIsIlBhZ2VEYXRlIiwiZGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJkYXkiLCJnZXREYXRlIiwiY2xhc3NOYW1lIiwzLCJfZ2V0IiwiX3giLCJfeDIiLCJfeDMiLCJfYWdhaW4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInJlY2VpdmVyIiwiZGVzYyIsInBhcmVudCIsImdldHRlciIsInVuZGVmaW5lZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsImdldFByb3RvdHlwZU9mIiwiX3ByZXZpZXciLCJfcHJldmlldzIiLCJQYWdlc0luZGV4Iiwic3RhdGUiLCJwYWdlcyIsImlkIiwicmVuZGVyUHJldmlld3MiLCJyZWNlbnRQYWdlcyIsIm1hcCIsInBhZ2UiLCJzb3J0IiwiYiIsImNyZWF0ZWRBdCIsIi4uL3N0b3Jlcy9wYWdlc19zdG9yZSIsIi4vcHJldmlldyIsNCwiX3JvdXRlciIsIl9yb3V0ZXIyIiwiX3N0b3Jlc1NldHRpbmdzIiwiX3N0b3Jlc1NldHRpbmdzMiIsIkxheW91dCIsInRpdGxlIiwiYXV0aG9yIiwiZG9jdW1lbnQiLCJocmVmIiwiSGFuZGxlciIsIkRhdGUiLCIuLi9zdG9yZXMvc2V0dGluZ3MiLCIuL3JvdXRlciIsNSwiTG9ja2VyIiw2LCJfZGF0ZSIsIl9kYXRlMiIsIl9sb2NrZXIiLCJfbG9ja2VyMiIsIlBhZ2VWaWV3IiwiY3VycmVudF9wYWdlIiwiZmluZCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJfcGFnZUxvYWRlZCIsImJpbmQiLCJsb2FkIiwiZXh0cmFjdCIsInNldFN0YXRlIiwibG9hZGVkIiwiLi9kYXRlIiwiLi9sb2NrZXIiLDcsIlBhZ2VQcmV2aWV3IiwicGF0aCIsOCwiX2luZGV4IiwiX2luZGV4MiIsIl9wYWdlIiwiX3BhZ2UyIiwiUm91dGVyIiwiUmVhY3RSb3V0ZXIiLCJSb3V0ZSIsInJvdXRlcyIsImhhbmRsZXIiLCJydW4iLCJIaXN0b3J5TG9jYXRpb24iLCJyZW5kZXIiLCJSb3V0ZUhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJsaW5rIiwidXJsIiwiZ2V0QXR0cmlidXRlIiwibWV0YV9rZXkiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwidGFnTmFtZSIsInByZXZlbnREZWZhdWx0IiwicHVzaCIsIi4vaW5kZXgiLCIuL3BhZ2UiLDksIl9ldmVudHMiLCJfdXRpbHNSZXF1ZXN0IiwiX3V0aWxzUmVxdWVzdDIiLCJQYWdlIiwiX0V2ZW50RW1pdHRlciIsInBhcmFtcyIsImZpbGUiLCJkYXRhIiwiZW1pdCIsIkV2ZW50RW1pdHRlciIsIi4uL3V0aWxzL3JlcXVlc3QiLCJldmVudHMiLDEwLCJQYWdlc1N0b3JlIiwieGhyIiwidXJscyIsInJlc3BvbnNlWE1MIiwicXVlcnlTZWxlY3RvckFsbCIsInNsaWNlIiwiZXh0cmFjdERhdGEiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJjYXRlZ29yeSIsInRhZ3MiLCJzcGxpdCIsInBvcCIsIl9pbnN0IiwiZmlsdGVyIiwxMSwxMiwiUmVxdWVzdCIsImNhbGxiYWNrIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJKU09OIiwicGFyc2UiLDEzLCJfbWF4TGlzdGVuZXJzIiwiaXNGdW5jdGlvbiIsImFyZyIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc1VuZGVmaW5lZCIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJzZXRNYXhMaXN0ZW5lcnMiLCJpc05hTiIsInR5cGUiLCJlciIsImxlbiIsImFyZ3MiLCJsaXN0ZW5lcnMiLCJlcnJvciIsIkFycmF5IiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsIm0iLCJuZXdMaXN0ZW5lciIsIndhcm5lZCIsImNvbnNvbGUiLCJ0cmFjZSIsIm9uY2UiLCJnIiwicmVtb3ZlTGlzdGVuZXIiLCJmaXJlZCIsImxpc3QiLCJwb3NpdGlvbiIsInNwbGljZSIsInJlbW92ZUFsbExpc3RlbmVycyIsInJldCIsImxpc3RlbmVyQ291bnQiLCJl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R0FIR3JNLEtBQUs0SCxTQUFZNUgsS0FBSzRILFFBQVFtRCxHQUUxQlIsRUFBV3ZLLEtBQUs0SCxRQUFRbUQsS0FDeEIvSyxLQUFLNEgsUUFBUW1ELElBRWQvSyxLQUFLNEgsUUFBUW1ELEdBQU1qQyxZQUk3QlQsRUFBYWlFLGNBQWdCLFNBQVNDLEVBQVN4QixHQUM3QyxHQUFJc0IsRUFPSixPQUhFQSxHQUhHRSxFQUFRM0UsU0FBWTJFLEVBQVEzRSxRQUFRbUQsR0FFaENSLEVBQVdnQyxFQUFRM0UsUUFBUW1ELElBQzVCLEVBRUF3QixFQUFRM0UsUUFBUW1ELEdBQU12TixPQUp0QixhQXdCQyIsImZpbGUiOiJhcHBsaWNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX2NvbXBvbmVudHNSb3V0ZXIgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL3JvdXRlclwiKTtcblxudmFyIF9jb21wb25lbnRzUm91dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudHNSb3V0ZXIpO1xuXG52YXIgX2NvbXBvbmVudHNMYXlvdXQgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2xheW91dFwiKTtcblxudmFyIF9jb21wb25lbnRzTGF5b3V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudHNMYXlvdXQpO1xuXG52YXIgX3N0b3Jlc1BhZ2VzX3N0b3JlID0gcmVxdWlyZShcIi4vc3RvcmVzL3BhZ2VzX3N0b3JlXCIpO1xuXG52YXIgX3N0b3Jlc1BhZ2VzX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3Jlc1BhZ2VzX3N0b3JlKTtcblxudmFyIEFwcCA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBBcHAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcCk7XG5cbiAgICBpZiAoX1JlYWN0JENvbXBvbmVudCAhPSBudWxsKSB7XG4gICAgICBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgX2luaGVyaXRzKEFwcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgX2NyZWF0ZUNsYXNzKEFwcCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzTGF5b3V0MltcImRlZmF1bHRcIl0sIHsgYm9keTogXCJTb21lIGJvZHksIGFueWJvZHkhXCIsIHNpZGViYXI6IFwiU2lkZWJhclwiIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBcHA7XG59KShSZWFjdC5Db21wb25lbnQpO1xuXG4vLyB3YWl0aW5nIGZvciB0aGUgaW5kZXggdG8gbG9hZFxuX3N0b3Jlc1BhZ2VzX3N0b3JlMltcImRlZmF1bHRcIl0uaW5zdCgpLm9uKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gIF9jb21wb25lbnRzUm91dGVyMltcImRlZmF1bHRcIl0uY29ubmVjdChBcHApO1xufSk7XG5cbn0se1wiLi9jb21wb25lbnRzL2xheW91dFwiOjQsXCIuL2NvbXBvbmVudHMvcm91dGVyXCI6OCxcIi4vc3RvcmVzL3BhZ2VzX3N0b3JlXCI6MTB9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBtb250aHMgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XG5cbnZhciBQYWdlRGF0ZSA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBQYWdlRGF0ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZURhdGUpO1xuXG4gICAgaWYgKF9SZWFjdCRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIF9pbmhlcml0cyhQYWdlRGF0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgX2NyZWF0ZUNsYXNzKFBhZ2VEYXRlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRhdGUgPSB0aGlzLnByb3BzLmRhdGU7XG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgIHZhciBtb250aCA9IG1vbnRoc1tkYXRlLmdldE1vbnRoKCldO1xuICAgICAgdmFyIGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuXG4gICAgICBpZiAoeWVhcikge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImRhdGVcIiB9LFxuICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgIGRheSxcbiAgICAgICAgICBcIiwgXCIsXG4gICAgICAgICAgeWVhclxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2VEYXRlO1xufSkoUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBQYWdlRGF0ZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IGRlc2MgPSBwYXJlbnQgPSBnZXR0ZXIgPSB1bmRlZmluZWQ7IF9hZ2FpbiA9IGZhbHNlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9zdG9yZXNQYWdlc19zdG9yZSA9IHJlcXVpcmUoXCIuLi9zdG9yZXMvcGFnZXNfc3RvcmVcIik7XG5cbnZhciBfc3RvcmVzUGFnZXNfc3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmVzUGFnZXNfc3RvcmUpO1xuXG52YXIgX3ByZXZpZXcgPSByZXF1aXJlKFwiLi9wcmV2aWV3XCIpO1xuXG52YXIgX3ByZXZpZXcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJldmlldyk7XG5cbnZhciBQYWdlc0luZGV4ID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFBhZ2VzSW5kZXgoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VzSW5kZXgpO1xuXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoUGFnZXNJbmRleC5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcGFnZXM6IF9zdG9yZXNQYWdlc19zdG9yZTJbXCJkZWZhdWx0XCJdLmluc3QoKS5wYWdlc1xuICAgIH07XG4gIH1cblxuICBfaW5oZXJpdHMoUGFnZXNJbmRleCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgX2NyZWF0ZUNsYXNzKFBhZ2VzSW5kZXgsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBpZDogXCJwYWdlc1wiIH0sXG4gICAgICAgIHRoaXMucmVuZGVyUHJldmlld3MoKVxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyUHJldmlld3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUHJldmlld3MoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWNlbnRQYWdlcygpLm1hcChmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfcHJldmlldzJbXCJkZWZhdWx0XCJdLCB7IHBhZ2U6IHBhZ2UgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVjZW50UGFnZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjZW50UGFnZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5wYWdlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmNyZWF0ZWRBdCA+IGIuY3JlYXRlZEF0ID8gLTEgOiAxO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2VzSW5kZXg7XG59KShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFBhZ2VzSW5kZXg7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG59LHtcIi4uL3N0b3Jlcy9wYWdlc19zdG9yZVwiOjEwLFwiLi9wcmV2aWV3XCI6N31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IGRlc2MgPSBwYXJlbnQgPSBnZXR0ZXIgPSB1bmRlZmluZWQ7IF9hZ2FpbiA9IGZhbHNlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yb3V0ZXIgPSByZXF1aXJlKFwiLi9yb3V0ZXJcIik7XG5cbnZhciBfcm91dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcik7XG5cbnZhciBfc3RvcmVzU2V0dGluZ3MgPSByZXF1aXJlKFwiLi4vc3RvcmVzL3NldHRpbmdzXCIpO1xuXG52YXIgX3N0b3Jlc1NldHRpbmdzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3Jlc1NldHRpbmdzKTtcblxudmFyIExheW91dCA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBMYXlvdXQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExheW91dCk7XG5cbiAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihMYXlvdXQucHJvdG90eXBlKSwgXCJjb25zdHJ1Y3RvclwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRpdGxlOiBfc3RvcmVzU2V0dGluZ3MyW1wiZGVmYXVsdFwiXS50aXRsZSxcbiAgICAgIGF1dGhvcjogX3N0b3Jlc1NldHRpbmdzMltcImRlZmF1bHRcIl0uYXV0aG9yXG4gICAgfTtcbiAgfVxuXG4gIF9pbmhlcml0cyhMYXlvdXQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIF9jcmVhdGVDbGFzcyhMYXlvdXQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBkb2N1bWVudC50aXRsZSA9IHRoaXMuc3RhdGUudGl0bGU7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImJvZHlcIixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImhlYWRlclwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJwYWRkaW5nc1wiIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgeyBocmVmOiBcIi9cIiwgY2xhc3NOYW1lOiBcImxvZ29cIiB9LFxuICAgICAgICAgICAgICBfc3RvcmVzU2V0dGluZ3MyW1wiZGVmYXVsdFwiXS50aXRsZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcIm1haW5cIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicGFkZGluZ3NcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJhcnRpY2xlXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JvdXRlcjJbXCJkZWZhdWx0XCJdLkhhbmRsZXIsIG51bGwpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJhc2lkZVwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICB0aGlzLnByb3BzLnNpZGViYXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJmb290ZXJcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicGFkZGluZ3NcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiQ29weXJpZ2h0IChDKSAyMDEyLVwiLFxuICAgICAgICAgICAgICBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICBfc3RvcmVzU2V0dGluZ3MyW1wiZGVmYXVsdFwiXS5hdXRob3JcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExheW91dDtcbn0pKFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gTGF5b3V0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxufSx7XCIuLi9zdG9yZXMvc2V0dGluZ3NcIjoxMSxcIi4vcm91dGVyXCI6OH1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvY2tlciA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBMb2NrZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2tlcik7XG5cbiAgICBpZiAoX1JlYWN0JENvbXBvbmVudCAhPSBudWxsKSB7XG4gICAgICBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgX2luaGVyaXRzKExvY2tlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2tlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJsb2NrZXJcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInNwaW5uZXJcIiB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9ja2VyO1xufSkoUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBMb2NrZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG59LHt9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBkZXNjID0gcGFyZW50ID0gZ2V0dGVyID0gdW5kZWZpbmVkOyBfYWdhaW4gPSBmYWxzZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfc3RvcmVzUGFnZXNfc3RvcmUgPSByZXF1aXJlKFwiLi4vc3RvcmVzL3BhZ2VzX3N0b3JlXCIpO1xuXG52YXIgX3N0b3Jlc1BhZ2VzX3N0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3Jlc1BhZ2VzX3N0b3JlKTtcblxudmFyIF9kYXRlID0gcmVxdWlyZShcIi4vZGF0ZVwiKTtcblxudmFyIF9kYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RhdGUpO1xuXG52YXIgX2xvY2tlciA9IHJlcXVpcmUoXCIuL2xvY2tlclwiKTtcblxudmFyIF9sb2NrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9ja2VyKTtcblxudmFyIFBhZ2VWaWV3ID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIFBhZ2VWaWV3KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdlVmlldyk7XG5cbiAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihQYWdlVmlldy5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgY3VycmVudF9wYWdlID0gX3N0b3Jlc1BhZ2VzX3N0b3JlMltcImRlZmF1bHRcIl0uZmluZChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZSk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcGFnZTogY3VycmVudF9wYWdlXG4gICAgfTtcblxuICAgIGN1cnJlbnRfcGFnZS5vbihcImxvYWRcIiwgdGhpcy5fcGFnZUxvYWRlZC5iaW5kKHRoaXMpKTtcbiAgICBjdXJyZW50X3BhZ2UubG9hZCgpO1xuICB9XG5cbiAgX2luaGVyaXRzKFBhZ2VWaWV3LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoUGFnZVZpZXcsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcGFnZSA9IHRoaXMuc3RhdGUucGFnZTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInBhZ2VcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJ0aXRsZVwiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChfZGF0ZTJbXCJkZWZhdWx0XCJdLCB7IGRhdGU6IHBhZ2UuY3JlYXRlZEF0IH0pLFxuICAgICAgICAgIHBhZ2UudGl0bGVcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInBcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhZ2UuYm9keSB8fCBwYWdlLmV4dHJhY3RcbiAgICAgICAgKSxcbiAgICAgICAgIXBhZ2UuYm9keSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KF9sb2NrZXIyW1wiZGVmYXVsdFwiXSwgbnVsbClcbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wYWdlTG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wYWdlTG9hZGVkKCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRlZDogdHJ1ZSB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFnZVZpZXc7XG59KShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFBhZ2VWaWV3O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxufSx7XCIuLi9zdG9yZXMvcGFnZXNfc3RvcmVcIjoxMCxcIi4vZGF0ZVwiOjIsXCIuL2xvY2tlclwiOjV9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX2RhdGUgPSByZXF1aXJlKFwiLi9kYXRlXCIpO1xuXG52YXIgX2RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGF0ZSk7XG5cbnZhciBQYWdlUHJldmlldyA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBQYWdlUHJldmlldygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZVByZXZpZXcpO1xuXG4gICAgaWYgKF9SZWFjdCRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIF9pbmhlcml0cyhQYWdlUHJldmlldywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgX2NyZWF0ZUNsYXNzKFBhZ2VQcmV2aWV3LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHBhZ2UgPSB0aGlzLnByb3BzLnBhZ2U7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJwYWdlIHByZXZpZXdcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJ0aXRsZVwiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChfZGF0ZTJbXCJkZWZhdWx0XCJdLCB7IGRhdGU6IHBhZ2UuY3JlYXRlZEF0IH0pLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgIHsgaHJlZjogcGFnZS5wYXRoIH0sXG4gICAgICAgICAgICBwYWdlLnRpdGxlXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwicFwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFnZS5leHRyYWN0XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2VQcmV2aWV3O1xufSkoUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBQYWdlUHJldmlldztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cbn0se1wiLi9kYXRlXCI6Mn1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vaW5kZXhcIik7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgpO1xuXG52YXIgX3BhZ2UgPSByZXF1aXJlKFwiLi9wYWdlXCIpO1xuXG52YXIgX3BhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFnZSk7XG5cbnZhciBSb3V0ZXIgPSBSZWFjdFJvdXRlcjtcbnZhciBSb3V0ZSA9IFJvdXRlci5Sb3V0ZTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG4gIGNvbm5lY3Q6IGZ1bmN0aW9uIGNvbm5lY3QoQXBwKSB7XG4gICAgdmFyIHJvdXRlcyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBSb3V0ZSxcbiAgICAgIHsgaGFuZGxlcjogQXBwLCBwYXRoOiBcIi9cIiB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBwYXRoOiBcIi9cIiwgaGFuZGxlcjogX2luZGV4MltcImRlZmF1bHRcIl0gfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHBhdGg6IFwiKlwiLCBoYW5kbGVyOiBfcGFnZTJbXCJkZWZhdWx0XCJdIH0pXG4gICAgKTtcblxuICAgIFJvdXRlci5ydW4ocm91dGVzLCBSb3V0ZXIuSGlzdG9yeUxvY2F0aW9uLCBmdW5jdGlvbiAoSGFuZGxlcikge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBcIlwiO1xuICAgICAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGFuZGxlciwgbnVsbCksIGRvY3VtZW50LmJvZHkpO1xuICAgIH0pO1xuICB9LFxuXG4gIEhhbmRsZXI6IFJvdXRlci5Sb3V0ZUhhbmRsZXJcbn07XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgdmFyIGxpbmsgPSBldmVudC50YXJnZXQsXG4gICAgICB1cmwgPSBsaW5rLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gIHZhciBtZXRhX2tleSA9IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXk7XG5cbiAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAhbWV0YV9rZXkgJiYgbGluay50YWdOYW1lID09PSBcIkFcIiAmJiB1cmxbMF0gPT09IFwiL1wiKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBSb3V0ZXIuSGlzdG9yeUxvY2F0aW9uLnB1c2godXJsKTtcbiAgfVxufSwgZmFsc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxufSx7XCIuL2luZGV4XCI6MyxcIi4vcGFnZVwiOjZ9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBkZXNjID0gcGFyZW50ID0gZ2V0dGVyID0gdW5kZWZpbmVkOyBfYWdhaW4gPSBmYWxzZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfZXZlbnRzID0gcmVxdWlyZShcImV2ZW50c1wiKTtcblxudmFyIF91dGlsc1JlcXVlc3QgPSByZXF1aXJlKFwiLi4vdXRpbHMvcmVxdWVzdFwiKTtcblxudmFyIF91dGlsc1JlcXVlc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNSZXF1ZXN0KTtcblxudmFyIFBhZ2UgPSAoZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgZnVuY3Rpb24gUGFnZShwYXJhbXMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZSk7XG5cbiAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihQYWdlLnByb3RvdHlwZSksIFwiY29uc3RydWN0b3JcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHtcbiAgICAgIHRoaXNba2V5XSA9IHBhcmFtc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIF9pbmhlcml0cyhQYWdlLCBfRXZlbnRFbWl0dGVyKTtcblxuICBfY3JlYXRlQ2xhc3MoUGFnZSwgW3tcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKCkge1xuICAgICAgbmV3IF91dGlsc1JlcXVlc3QyW1wiZGVmYXVsdFwiXSh0aGlzLmZpbGUpLmdldCgoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gZGF0YTtcbiAgICAgICAgdGhpcy5lbWl0KFwibG9hZFwiKTtcbiAgICAgIH0pLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWdlO1xufSkoX2V2ZW50cy5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFBhZ2U7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG59LHtcIi4uL3V0aWxzL3JlcXVlc3RcIjoxMixcImV2ZW50c1wiOjEzfV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IGRlc2MgPSBwYXJlbnQgPSBnZXR0ZXIgPSB1bmRlZmluZWQ7IF9hZ2FpbiA9IGZhbHNlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9ldmVudHMgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuXG52YXIgX3V0aWxzUmVxdWVzdCA9IHJlcXVpcmUoXCIuLi91dGlscy9yZXF1ZXN0XCIpO1xuXG52YXIgX3V0aWxzUmVxdWVzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc1JlcXVlc3QpO1xuXG52YXIgX3BhZ2UgPSByZXF1aXJlKFwiLi9wYWdlXCIpO1xuXG52YXIgX3BhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFnZSk7XG5cbnZhciBQYWdlc1N0b3JlID0gKGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIGZ1bmN0aW9uIFBhZ2VzU3RvcmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VzU3RvcmUpO1xuXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoUGFnZXNTdG9yZS5wcm90b3R5cGUpLCBcImNvbnN0cnVjdG9yXCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgdGhpcy5wYWdlcyA9IG51bGw7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBfaW5oZXJpdHMoUGFnZXNTdG9yZSwgX0V2ZW50RW1pdHRlcik7XG5cbiAgX2NyZWF0ZUNsYXNzKFBhZ2VzU3RvcmUsIFt7XG4gICAga2V5OiBcImxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIG5ldyBfdXRpbHNSZXF1ZXN0MltcImRlZmF1bHRcIl0oXCIvc2l0ZW1hcC54bWxcIikuZ2V0KChmdW5jdGlvbiAoZGF0YSwgeGhyKSB7XG4gICAgICAgIHZhciB1cmxzID0geGhyLnJlc3BvbnNlWE1MLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ1cmxcIik7XG4gICAgICAgIHRoaXMucGFnZXMgPSBbXS5zbGljZS5jYWxsKHVybHMpLm1hcCgoZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgIHJldHVybiBuZXcgX3BhZ2UyW1wiZGVmYXVsdFwiXSh0aGlzLmV4dHJhY3REYXRhKHVybCkpO1xuICAgICAgICB9KS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5lbWl0KFwibG9hZFwiKTtcbiAgICAgIH0pLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0RGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0RGF0YSh1cmwpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBwYXRoOiAodXJsLnF1ZXJ5U2VsZWN0b3IoXCJsb2NcIikgfHwge30pLnRleHRDb250ZW50LFxuICAgICAgICBjcmVhdGVkQXQ6ICh1cmwucXVlcnlTZWxlY3RvcihcImxhc3Rtb2RcIikgfHwge30pLnRleHRDb250ZW50LFxuICAgICAgICBmaWxlOiAodXJsLnF1ZXJ5U2VsZWN0b3IoXCJmaWxlbG9jXCIpIHx8IHt9KS50ZXh0Q29udGVudCxcbiAgICAgICAgY2F0ZWdvcnk6ICh1cmwucXVlcnlTZWxlY3RvcihcImNhdGVnb3J5XCIpIHx8IHt9KS50ZXh0Q29udGVudCxcbiAgICAgICAgdGFnczogKHVybC5xdWVyeVNlbGVjdG9yKFwidGFnc1wiKSB8fCB7fSkudGV4dENvbnRlbnQsXG4gICAgICAgIHRpdGxlOiAodXJsLnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKSB8fCB7fSkudGV4dENvbnRlbnQsXG4gICAgICAgIGV4dHJhY3Q6ICh1cmwucXVlcnlTZWxlY3RvcihcImV4dHJhY3RcIikgfHwge30pLnRleHRDb250ZW50XG4gICAgICB9O1xuXG4gICAgICB0cnkge1xuICAgICAgICBkYXRhLnBhdGggPSBkYXRhLnBhdGguc3BsaXQoXCIuY29tXCIpLnBvcCgpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEudGFncyA9IGRhdGEudGFncy5zcGxpdChcIixcIik7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YS5jcmVhdGVkQXQgPSBuZXcgRGF0ZShkYXRhLmNyZWF0ZWRBdCk7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJpbnN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3QoKSB7XG4gICAgICAhdGhpcy5faW5zdCAmJiAodGhpcy5faW5zdCA9IG5ldyBQYWdlc1N0b3JlKCkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2luc3Q7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZChwYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0KCkucGFnZXMuZmlsdGVyKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgIHJldHVybiBwYWdlLnBhdGggPT0gcGF0aDtcbiAgICAgIH0pWzBdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWdlc1N0b3JlO1xufSkoX2V2ZW50cy5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFBhZ2VzU3RvcmU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG59LHtcIi4uL3V0aWxzL3JlcXVlc3RcIjoxMixcIi4vcGFnZVwiOjksXCJldmVudHNcIjoxM31dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG4gIHRpdGxlOiBcIk5pa29sYXkuVGhlT3NvbVwiLFxuICBhdXRob3I6IFwiTmlrb2xheSBOZW1zaGlsb3ZcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cbn0se31dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQSBkdW1iIHNpbXBsZSBYSFIuZ2V0IHRoaW5nXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSZXF1ZXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVxdWVzdCh1cmwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVxdWVzdCk7XG5cbiAgICB0aGlzLnVybCA9IHVybDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGNhbGxiYWNrKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub3BlbihcIkdFVFwiLCB0aGlzLnVybCwgdHJ1ZSk7XG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IDQgJiYgdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgY2FsbGJhY2sodGhpcy5yZXNwb25zZVRleHQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRKU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEpTT04oY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuZ2V0KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrKEpTT04ucGFyc2UoZGF0YSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlcXVlc3Q7XG59KSgpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFJlcXVlc3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG59LHt9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LicpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgdmFyIG07XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSAwO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKGVtaXR0ZXIuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gMTtcbiAgZWxzZVxuICAgIHJldCA9IGVtaXR0ZXIuX2V2ZW50c1t0eXBlXS5sZW5ndGg7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cbn0se31dfSx7fSxbMV0pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENJdlZYTmxjbk12Ym1scmIyeGhlUzlFYjJOMWJXVnVkSE12Ym1scmIyeGhlUzUwYUdWdmMyOXRMbU52YlM5aGNIQXZZWEJ3YkdsallYUnBiMjR1YW5ONElpd2lMMVZ6WlhKekwyNXBhMjlzWVhrdlJHOWpkVzFsYm5SekwyNXBhMjlzWVhrdWRHaGxiM052YlM1amIyMHZZWEJ3TDJOdmJYQnZibVZ1ZEhNdlpHRjBaUzVxYzNnaUxDSXZWWE5sY25NdmJtbHJiMnhoZVM5RWIyTjFiV1Z1ZEhNdmJtbHJiMnhoZVM1MGFHVnZjMjl0TG1OdmJTOWhjSEF2WTI5dGNHOXVaVzUwY3k5cGJtUmxlQzVxYzNnaUxDSXZWWE5sY25NdmJtbHJiMnhoZVM5RWIyTjFiV1Z1ZEhNdmJtbHJiMnhoZVM1MGFHVnZjMjl0TG1OdmJTOWhjSEF2WTI5dGNHOXVaVzUwY3k5c1lYbHZkWFF1YW5ONElpd2lMMVZ6WlhKekwyNXBhMjlzWVhrdlJHOWpkVzFsYm5SekwyNXBhMjlzWVhrdWRHaGxiM052YlM1amIyMHZZWEJ3TDJOdmJYQnZibVZ1ZEhNdmJHOWphMlZ5TG1wemVDSXNJaTlWYzJWeWN5OXVhV3R2YkdGNUwwUnZZM1Z0Wlc1MGN5OXVhV3R2YkdGNUxuUm9aVzl6YjIwdVkyOXRMMkZ3Y0M5amIyMXdiMjVsYm5SekwzQmhaMlV1YW5ONElpd2lMMVZ6WlhKekwyNXBhMjlzWVhrdlJHOWpkVzFsYm5SekwyNXBhMjlzWVhrdWRHaGxiM052YlM1amIyMHZZWEJ3TDJOdmJYQnZibVZ1ZEhNdmNISmxkbWxsZHk1cWMzZ2lMQ0l2VlhObGNuTXZibWxyYjJ4aGVTOUViMk4xYldWdWRITXZibWxyYjJ4aGVTNTBhR1Z2YzI5dExtTnZiUzloY0hBdlkyOXRjRzl1Wlc1MGN5OXliM1YwWlhJdWFuTjRJaXdpTDFWelpYSnpMMjVwYTI5c1lYa3ZSRzlqZFcxbGJuUnpMMjVwYTI5c1lYa3VkR2hsYjNOdmJTNWpiMjB2WVhCd0wzTjBiM0psY3k5d1lXZGxMbXB6SWl3aUwxVnpaWEp6TDI1cGEyOXNZWGt2Ukc5amRXMWxiblJ6TDI1cGEyOXNZWGt1ZEdobGIzTnZiUzVqYjIwdllYQndMM04wYjNKbGN5OXdZV2RsYzE5emRHOXlaUzVxYzNnaUxDSXZWWE5sY25NdmJtbHJiMnhoZVM5RWIyTjFiV1Z1ZEhNdmJtbHJiMnhoZVM1MGFHVnZjMjl0TG1OdmJTOWhjSEF2YzNSdmNtVnpMM05sZEhScGJtZHpMbXB6SWl3aUwxVnpaWEp6TDI1cGEyOXNZWGt2Ukc5amRXMWxiblJ6TDI1cGEyOXNZWGt1ZEdobGIzTnZiUzVqYjIwdllYQndMM1YwYVd4ekwzSmxjWFZsYzNRdWFuTjRJaXdpYm05a1pWOXRiMlIxYkdWekwySnliM2R6WlhKcFpua3ZibTlrWlY5dGIyUjFiR1Z6TDJWMlpXNTBjeTlsZG1WdWRITXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3pzN08yZERRMEZ0UWl4eFFrRkJjVUk3T3pzN1owTkJRM0pDTEhGQ1FVRnhRanM3T3p0cFEwRkRha0lzYzBKQlFYTkNPenM3TzBsQlJYWkRMRWRCUVVjN1YwRkJTQ3hIUVVGSE96QkNRVUZJTEVkQlFVYzdPenM3T3pzN1dVRkJTQ3hIUVVGSE96dGxRVUZJTEVkQlFVYzdPMWRCUTBRc2EwSkJRVWM3UVVGRFVDeGhRVU5GTEhGRVFVRlJMRWxCUVVrc1JVRkJReXh4UWtGQmNVSXNSVUZCUXl4UFFVRlBMRVZCUVVNc1UwRkJVeXhIUVVGVkxFTkJRemxFTzB0QlEwZzdPenRUUVV4SExFZEJRVWM3UjBGQlV5eExRVUZMTEVOQlFVTXNVMEZCVXpzN08wRkJVMnBETEN0Q1FVRlhMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNXVUZCVnp0QlFVTjBReXhuUTBGQlR5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1EwRkRja0lzUTBGQlF5eERRVUZET3pzN096czdPenM3T3pzN096czdRVU5tU0N4SlFVRkpMRTFCUVUwc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wbEJSVGRGTEZGQlFWRTdWMEZCVWl4UlFVRlJPekJDUVVGU0xGRkJRVkU3T3pzN096czdXVUZCVWl4UlFVRlJPenRsUVVGU0xGRkJRVkU3TzFkQlEzSkNMR3RDUVVGSE8wRkJRMUFzVlVGQlNTeEpRVUZKTEVkQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRE5VSXNWVUZCU1N4SlFVRkpMRWRCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzBGQlF5OUNMRlZCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOd1F5eFZRVUZKTEVkQlFVY3NSMEZCU3l4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03TzBGQlJUTkNMRlZCUVVrc1NVRkJTU3hGUVVGRk8wRkJRMUlzWlVGRFJUczdXVUZCU3l4VFFVRlRMRVZCUVVNc1RVRkJUVHRWUVVGRkxFdEJRVXM3TzFWQlFVY3NSMEZCUnpzN1ZVRkJTU3hKUVVGSk8xTkJRVThzUTBGRGFrUTdUMEZEU0N4TlFVRk5PMEZCUTB3c1pVRkJUeXhKUVVGSkxFTkJRVU03VDBGRFlqdExRVVZHT3pzN1UwRm1hMElzVVVGQlVUdEhRVUZUTEV0QlFVc3NRMEZCUXl4VFFVRlRPenR4UWtGQmFFTXNVVUZCVVRzN096czdPenM3T3pzN096czdPenM3T3pzN2FVTkRSazRzZFVKQlFYVkNPenM3TzNWQ1FVTjBRaXhYUVVGWE96czdPMGxCUldRc1ZVRkJWVHRCUVVOc1FpeFhRVVJSTEZWQlFWVXNSMEZEWmpzd1FrRkVTeXhWUVVGVk96dEJRVVV6UWl3clFrRkdhVUlzVlVGQlZTdzJRMEZGYmtJN08wRkJSVklzVVVGQlNTeERRVUZETEV0QlFVc3NSMEZCUnp0QlFVTllMRmRCUVVzc1JVRkJSU3dyUWtGQlZ5eEpRVUZKTEVWQlFVVXNRMEZCUXl4TFFVRkxPMHRCUXk5Q0xFTkJRVU03UjBGRFNEczdXVUZRYTBJc1ZVRkJWVHM3WlVGQlZpeFZRVUZWT3p0WFFWTjJRaXhyUWtGQlJ6dEJRVU5RTEdGQlEwVTdPMVZCUVVzc1JVRkJSU3hGUVVGRExFOUJRVTg3VVVGRFdpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZPMDlCUTJ4Q0xFTkJRMDQ3UzBGRFNEczdPMWRCUldFc01FSkJRVWM3UVVGRFppeGhRVUZQTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlV5eEpRVUZKTEVWQlFVVTdRVUZETTBNc1pVRkJUeXcwUTBGQllTeEpRVUZKTEVWQlFVVXNTVUZCU1N4QlFVRkRMRWRCUVVjc1EwRkJRenRQUVVOd1F5eERRVUZETEVOQlFVTTdTMEZEU2pzN08xZEJSVlVzZFVKQlFVYzdRVUZEV2l4aFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVVU3UVVGRGVrTXNaVUZCVHl4RFFVRkRMRU5CUVVNc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wOUJRek5ETEVOQlFVTXNRMEZCUXp0TFFVTktPenM3VTBFelFtdENMRlZCUVZVN1IwRkJVeXhMUVVGTExFTkJRVU1zVTBGQlV6czdjVUpCUVd4RExGVkJRVlU3T3pzN096czdPenM3T3pzN096czdPenM3TzNOQ1EwaGFMRlZCUVZVN096czdPRUpCUTFJc2IwSkJRVzlDT3pzN08wbEJSWEJDTEUxQlFVMDdRVUZEWkN4WFFVUlJMRTFCUVUwc1IwRkRXRHN3UWtGRVN5eE5RVUZOT3p0QlFVVjJRaXdyUWtGR2FVSXNUVUZCVFN3MlEwRkZaanM3UVVGRlVpeFJRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhPMEZCUTFnc1YwRkJTeXhGUVVGSExEUkNRVUZUTEV0QlFVczdRVUZEZEVJc1dVRkJUU3hGUVVGRkxEUkNRVUZUTEUxQlFVMDdTMEZEZUVJc1EwRkJRenRIUVVOSU96dFpRVkpyUWl4TlFVRk5PenRsUVVGT0xFMUJRVTA3TzFkQlZXNUNMR3RDUVVGSE8wRkJRMUFzWTBGQlVTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF6czdRVUZGYkVNc1lVRkRSVHM3TzFGQlEwVTdPenRWUVVORk96dGpRVUZMTEZOQlFWTXNSVUZCUXl4VlFVRlZPMWxCUTNaQ096dG5Ra0ZCUnl4SlFVRkpMRVZCUVVNc1IwRkJSeXhGUVVGRExGTkJRVk1zUlVGQlF5eE5RVUZOTzJOQlFVVXNORUpCUVZNc1MwRkJTenRoUVVGTE8xZEJRemRETzFOQlEwTTdVVUZEVkRzN08xVkJRMFU3TzJOQlFVc3NVMEZCVXl4RlFVRkRMRlZCUVZVN1dVRkRka0k3T3p0alFVTkZMRzlDUVVGRExHOUNRVUZQTEU5QlFVOHNUMEZCUnp0aFFVTldPMWxCUTFZN096dGpRVU5ITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUenRoUVVOaU8xZEJRMG83VTBGRFJEdFJRVU5RT3pzN1ZVRkRSVHM3WTBGQlN5eFRRVUZUTEVWQlFVTXNWVUZCVlR0WlFVTjJRanM3T3p0alFVRjFRaXhKUVVGSkxFbEJRVWtzUlVGQlJTeERRVUZETEZkQlFWY3NSVUZCUlRzN1kwRkJSeXcwUWtGQlV5eE5RVUZOTzJGQlFVczdWMEZEYkVVN1UwRkRRenRQUVVOS0xFTkJRMUE3UzBGRFNEczdPMU5CY2tOclFpeE5RVUZOTzBkQlFWTXNTMEZCU3l4RFFVRkRMRk5CUVZNN08zRkNRVUU1UWl4TlFVRk5PenM3T3pzN096czdPenM3T3pzN08wbERTRTRzVFVGQlRUdFhRVUZPTEUxQlFVMDdNRUpCUVU0c1RVRkJUVHM3T3pzN096dFpRVUZPTEUxQlFVMDdPMlZCUVU0c1RVRkJUVHM3VjBGRGJrSXNhMEpCUVVjN1FVRkRVQ3hoUVVORk96dFZRVUZMTEZOQlFWTXNSVUZCUXl4UlFVRlJPMUZCUTNKQ0xEWkNRVUZMTEZOQlFWTXNSVUZCUXl4VFFVRlRMRWRCUld4Q08wOUJRMFlzUTBGRFVEdExRVU5HT3pzN1UwRlVhMElzVFVGQlRUdEhRVUZUTEV0QlFVc3NRMEZCUXl4VFFVRlRPenR4UWtGQk9VSXNUVUZCVFRzN096czdPenM3T3pzN096czdPenM3T3pzN2FVTkRRVW9zZFVKQlFYVkNPenM3TzI5Q1FVTjZRaXhSUVVGUk96czdPM05DUVVOV0xGVkJRVlU3T3pzN1NVRkZVaXhSUVVGUk8wRkJRMmhDTEZkQlJGRXNVVUZCVVN4SFFVTmlPekJDUVVSTExGRkJRVkU3TzBGQlJYcENMQ3RDUVVacFFpeFJRVUZSTERaRFFVVnFRanM3UVVGRlVpeFJRVUZKTEZsQlFWa3NSMEZCUnl3clFrRkJWeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3UVVGRkwwUXNVVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSenRCUVVOWUxGVkJRVWtzUlVGQlJTeFpRVUZaTzB0QlEyNUNMRU5CUVVNN08wRkJSVVlzWjBKQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGNrUXNaMEpCUVZrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEhRVU55UWpzN1dVRmFhMElzVVVGQlVUczdaVUZCVWl4UlFVRlJPenRYUVdOeVFpeHJRa0ZCUnp0QlFVTlFMRlZCUVVrc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRPenRCUVVVelFpeGhRVU5GT3p0VlFVRkxMRk5CUVZNc1JVRkJReXhOUVVGTk8xRkJRMjVDT3p0WlFVRkpMRk5CUVZNc1JVRkJReXhQUVVGUE8xVkJRMjVDTEhsRFFVRlZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEJRVUZETEVkQlFVVTdWVUZEYUVNc1NVRkJTU3hEUVVGRExFdEJRVXM3VTBGRFVqdFJRVU5NT3pzN1ZVRkRSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBPMU5CUTNoQ08xRkJSVWdzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRGhEUVVGVE8wOUJRM0JDTEVOQlExQTdTMEZEUmpzN08xZEJSVlVzZFVKQlFVYzdRVUZEV2l4VlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUXl4RFFVRkRMRU5CUVVNN1MwRkRMMEk3T3p0VFFXeERhMElzVVVGQlVUdEhRVUZUTEV0QlFVc3NRMEZCUXl4VFFVRlRPenR4UWtGQmFFTXNVVUZCVVRzN096czdPenM3T3pzN096czdPenM3TzI5Q1EwcFNMRkZCUVZFN096czdTVUZGVWl4WFFVRlhPMWRCUVZnc1YwRkJWenN3UWtGQldDeFhRVUZYT3pzN096czdPMWxCUVZnc1YwRkJWenM3WlVGQldDeFhRVUZYT3p0WFFVTjRRaXhyUWtGQlJ6dEJRVU5RTEZWQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZET3p0QlFVVXpRaXhoUVVORk96dFZRVUZMTEZOQlFWTXNSVUZCUXl4alFVRmpPMUZCUXpOQ096dFpRVUZKTEZOQlFWTXNSVUZCUXl4UFFVRlBPMVZCUTI1Q0xIbERRVUZWTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhCUVVGRExFZEJRVVU3VlVGRGFrTTdPMk5CUVVjc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVGQlFVTTdXVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTenRYUVVGTE8xTkJRMnBETzFGQlEwdzdPenRWUVVOSExFbEJRVWtzUTBGQlF5eFBRVUZQTzFOQlExZzdUMEZEUVN4RFFVTk9PMHRCUTBnN096dFRRV1pyUWl4WFFVRlhPMGRCUVZNc1MwRkJTeXhEUVVGRExGTkJRVk03TzNGQ1FVRnVReXhYUVVGWE96czdPenM3T3pzN096czdjVUpEUTFRc1UwRkJVenM3T3p0dlFrRkRXQ3hSUVVGUk96czdPMEZCU2pkQ0xFbEJRVWtzVFVGQlRTeEhRVUZITEZkQlFWY3NRMEZCUXp0QlFVTjZRaXhKUVVGSkxFdEJRVXNzUjBGQlNTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPenR4UWtGTFdEdEJRVU5pTEZOQlFVOHNSVUZCUlN4cFFrRkJVeXhIUVVGSExFVkJRVVU3UVVGRGNrSXNVVUZCU1N4TlFVRk5MRWRCUTFJN1FVRkJReXhYUVVGTE8xRkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NRVUZCUXl4RlFVRkRMRWxCUVVrc1JVRkJReXhIUVVGSE8wMUJRek5DTEc5Q1FVRkRMRXRCUVVzc1NVRkJReXhKUVVGSkxFVkJRVU1zUjBGQlJ5eEZRVUZETEU5QlFVOHNiMEpCUVdFc1IwRkJSenROUVVOMlF5eHZRa0ZCUXl4TFFVRkxMRWxCUVVNc1NVRkJTU3hGUVVGRExFZEJRVWNzUlVGQlF5eFBRVUZQTEcxQ1FVRlhMRWRCUVVjN1MwRkRMMElzUVVGRFZDeERRVUZET3p0QlFVVkdMRlZCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4bFFVRmxMRVZCUVVVc1ZVRkJWU3hQUVVGUExFVkJRVVU3UVVGRE5VUXNZMEZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlF6ZENMRmRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zYjBKQlFVTXNUMEZCVHl4UFFVRkZMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEzcERMRU5CUVVNc1EwRkJRenRIUVVOS096dEJRVVZFTEZOQlFVOHNSVUZCUlN4TlFVRk5MRU5CUVVNc1dVRkJXVHREUVVNM1FqczdRVUZGUkN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZNc1MwRkJTeXhGUVVGRk8wRkJRMnBFTEUxQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTk8wMUJRVVVzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGVrUXNUVUZCU1N4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExFOUJRVThzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFbEJRVWtzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXpzN1FVRkZhRVlzVFVGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4TFFVRkxMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZPMEZCUXpkRkxGTkJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0QlFVTjJRaXhWUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRIUVVOc1F6dERRVU5HTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN08zTkNRMmhEYVVJc1VVRkJVVHM3TkVKQlEyWXNhMEpCUVd0Q096czdPMGxCUldwQ0xFbEJRVWs3UVVGRFdpeFhRVVJSTEVsQlFVa3NRMEZEV0N4TlFVRk5MRVZCUVVVN01FSkJSRVFzU1VGQlNUczdRVUZGY2tJc0swSkJSbWxDTEVsQlFVa3NOa05CUldJN08wRkJSVklzVTBGQlN5eEpRVUZKTEVkQlFVY3NTVUZCU1N4TlFVRk5MRVZCUVVVN1FVRkRkRUlzVlVGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU42UWp0SFFVTkdPenRaUVZCclFpeEpRVUZKT3p0bFFVRktMRWxCUVVrN08xZEJVMjVDTEdkQ1FVRkhPMEZCUTB3c2IwTkJRVmtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQkxGVkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEzaERMRmxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEycENMRmxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdUMEZEYmtJc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTJZN096dFRRV1JyUWl4SlFVRkpPMWRCU0dwQ0xGbEJRVms3TzNGQ1FVZERMRWxCUVVrN096czdPenM3T3pzN096czdPenM3T3pzN08zTkNRMGhGTEZGQlFWRTdPelJDUVVObUxHdENRVUZyUWpzN096dHZRa0ZEY2tJc1VVRkJVVHM3T3p0SlFVVktMRlZCUVZVN1FVRlpiRUlzVjBGYVVTeFZRVUZWTEVkQldXWTdNRUpCV2tzc1ZVRkJWVHM3UVVGaE0wSXNLMEpCWW1sQ0xGVkJRVlVzTmtOQllXNUNPMEZCUTFJc1VVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYkVJc1VVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBkQlEySTdPMWxCYUVKclFpeFZRVUZWT3p0bFFVRldMRlZCUVZVN08xZEJhMEo2UWl4blFrRkJSenRCUVVOTUxHOURRVUZaTEdOQlFXTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQkxGVkJRVk1zU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlR0QlFVTnNSQ3haUVVGSkxFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMR2RDUVVGblFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTI1RUxGbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFc1ZVRkJVeXhIUVVGSExFVkJRVVU3UVVGRGFrUXNhVUpCUVU4c2MwSkJRVk1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRM2hETEVOQlFVRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5rTEZsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VDBGRGJrSXNRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEyWTdPenRYUVVWVkxIRkNRVUZETEVkQlFVY3NSVUZCUlR0QlFVTm1MRlZCUVVrc1NVRkJTU3hIUVVGSE8wRkJRMVFzV1VGQlNTeEZRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlV5eEZRVUZGTEVOQlFVRXNRMEZCUlN4WFFVRlhPMEZCUXpWRUxHbENRVUZUTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZMTEVWQlFVVXNRMEZCUVN4RFFVRkZMRmRCUVZjN1FVRkROVVFzV1VGQlNTeEZRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlN5eEZRVUZGTEVOQlFVRXNRMEZCUlN4WFFVRlhPMEZCUXpWRUxHZENRVUZSTEVWQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUVN4RFFVRkZMRmRCUVZjN1FVRkROVVFzV1VGQlNTeEZRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlVTeEZRVUZGTEVOQlFVRXNRMEZCUlN4WFFVRlhPMEZCUXpWRUxHRkJRVXNzUlVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVThzUlVGQlJTeERRVUZCTEVOQlFVVXNWMEZCVnp0QlFVTTFSQ3hsUVVGUExFVkJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGTExFVkJRVVVzUTBGQlFTeERRVUZGTEZkQlFWYzdUMEZETjBRc1EwRkJRenM3UVVGRlJpeFZRVUZKTzBGQlFVVXNXVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFBRVUZGTEVOQlFVTXNUMEZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVNNVJDeFZRVUZKTzBGQlFVVXNXVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRQUVVGRkxFTkJRVU1zVDBGQlRTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTnlSQ3hWUVVGSk8wRkJRVVVzV1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdUMEZCUlN4RFFVRkRMRTlCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVU3TzBGQlJUbEVMR0ZCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMkk3T3p0WFFUTkRWU3huUWtGQlJ6dEJRVU5hTEU5QlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1MwRkJTeXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NWVUZCVlN4RlFVRkZMRU5CUVVFc1FVRkJReXhEUVVGRE8wRkJReTlETEdGQlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVOdVFqczdPMWRCUlZVc1kwRkJReXhKUVVGSkxFVkJRVVU3UVVGRGFFSXNZVUZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlRMRWxCUVVrc1JVRkJSVHRCUVVNM1F5eGxRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hEUVVGRE8wOUJRekZDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOUU96czdVMEZXYTBJc1ZVRkJWVHRYUVVwMlFpeFpRVUZaT3p0eFFrRkpReXhWUVVGVk96czdPenM3T3pzN2NVSkRTbWhDTzBGQlEySXNUMEZCU3l4RlFVRkhMR2xDUVVGcFFqdEJRVU42UWl4UlFVRk5MRVZCUVVVc2JVSkJRVzFDTzBOQlF6VkNPenM3T3pzN096czdPenM3T3pzN096dEpRMEZ2UWl4UFFVRlBPMEZCUTJZc1YwRkVVU3hQUVVGUExFTkJRMlFzUjBGQlJ5eEZRVUZGT3pCQ1FVUkZMRTlCUVU4N08wRkJSWGhDTEZGQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8wZEJRMmhDT3p0bFFVaHJRaXhQUVVGUE96dFhRVXQyUWl4aFFVRkRMRkZCUVZFc1JVRkJSVHRCUVVOYUxGVkJRVWtzUjBGQlJ5eEhRVUZITEVsQlFVa3NZMEZCWXl4RlFVRkZMRU5CUVVNN1FVRkRMMElzVTBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZhRU1zVTBGQlJ5eERRVUZETEd0Q1FVRnJRaXhIUVVGSExGbEJRVmM3UVVGRGJFTXNXVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hMUVVGTExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVkQlFVY3NSVUZCUlR0QlFVTndSU3hyUWtGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGRGJrTTdUMEZEUml4RFFVRkRPenRCUVVWR0xGTkJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0TFFVTmFPenM3VjBGRlRTeHBRa0ZCUXl4UlFVRlJMRVZCUVVVN1FVRkRhRUlzVlVGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlRMRWxCUVVrc1JVRkJSVHRCUVVOMFFpeG5Ra0ZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0UFFVTTFRaXhEUVVGRExFTkJRVU03UzBGRFNqczdPMU5CZEVKclFpeFBRVUZQT3pzN2NVSkJRVkFzVDBGQlR6czdPenRCUTBnMVFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z1pTaDBMRzRzY2lsN1puVnVZM1JwYjI0Z2N5aHZMSFVwZTJsbUtDRnVXMjlkS1h0cFppZ2hkRnR2WFNsN2RtRnlJR0U5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0cFppZ2hkU1ltWVNseVpYUjFjbTRnWVNodkxDRXdLVHRwWmlocEtYSmxkSFZ5YmlCcEtHOHNJVEFwTzNaaGNpQm1QVzVsZHlCRmNuSnZjaWhjSWtOaGJtNXZkQ0JtYVc1a0lHMXZaSFZzWlNBblhDSXJieXRjSWlkY0lpazdkR2h5YjNjZ1ppNWpiMlJsUFZ3aVRVOUVWVXhGWDA1UFZGOUdUMVZPUkZ3aUxHWjlkbUZ5SUd3OWJsdHZYVDE3Wlhod2IzSjBjenA3ZlgwN2RGdHZYVnN3WFM1allXeHNLR3d1Wlhod2IzSjBjeXhtZFc1amRHbHZiaWhsS1h0MllYSWdiajEwVzI5ZFd6RmRXMlZkTzNKbGRIVnliaUJ6S0c0L2JqcGxLWDBzYkN4c0xtVjRjRzl5ZEhNc1pTeDBMRzRzY2lsOWNtVjBkWEp1SUc1YmIxMHVaWGh3YjNKMGMzMTJZWElnYVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8yWnZjaWgyWVhJZ2J6MHdPMjg4Y2k1c1pXNW5kR2c3YnlzcktYTW9jbHR2WFNrN2NtVjBkWEp1SUhOOUtTSXNJbWx0Y0c5eWRDQlNiM1YwWlhJZ1puSnZiU0JjSWk0dlkyOXRjRzl1Wlc1MGN5OXliM1YwWlhKY0lqdGNibWx0Y0c5eWRDQk1ZWGx2ZFhRZ1puSnZiU0JjSWk0dlkyOXRjRzl1Wlc1MGN5OXNZWGx2ZFhSY0lqdGNibWx0Y0c5eWRDQlFZV2RsYzFOMGIzSmxJR1p5YjIwZ1hDSXVMM04wYjNKbGN5OXdZV2RsYzE5emRHOXlaVndpTzF4dVhHNWpiR0Z6Y3lCQmNIQWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5RZ2UxeHVJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUtGeHVJQ0FnSUNBZ1BFeGhlVzkxZENCaWIyUjVQVndpVTI5dFpTQmliMlI1TENCaGJubGliMlI1SVZ3aUlITnBaR1ZpWVhJOVhDSlRhV1JsWW1GeVhDSStQQzlNWVhsdmRYUStYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVYRzR2THlCM1lXbDBhVzVuSUdadmNpQjBhR1VnYVc1a1pYZ2dkRzhnYkc5aFpGeHVVR0ZuWlhOVGRHOXlaUzVwYm5OMEtDa3ViMjRvWENKc2IyRmtYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0JTYjNWMFpYSXVZMjl1Ym1WamRDaEJjSEFwTzF4dWZTazdYRzRpTENKMllYSWdiVzl1ZEdoeklEMGdXMXdpU21GdVhDSXNJRndpUm1WaVhDSXNJRndpVFdGeVhDSXNJRndpUVhCeVhDSXNJRndpVFdGNVhDSXNJRndpU25WdVhDSXNJRndpU25Wc1hDSXNJRndpUVhWblhDSXNJRndpVTJWd1hDSXNJRndpVDJOMFhDSXNJRndpVG05MlhDSXNJRndpUkdWalhDSmRPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlFZV2RsUkdGMFpTQmxlSFJsYm1SeklGSmxZV04wTGtOdmJYQnZibVZ1ZENCN1hHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQjJZWElnWkdGMFpTQWdQU0IwYUdsekxuQnliM0J6TG1SaGRHVTdYRzRnSUNBZ2RtRnlJSGxsWVhJZ0lEMGdaR0YwWlM1blpYUkdkV3hzV1dWaGNpZ3BPMXh1SUNBZ0lIWmhjaUJ0YjI1MGFDQTlJRzF2Ym5Sb2MxdGtZWFJsTG1kbGRFMXZiblJvS0NsZE8xeHVJQ0FnSUhaaGNpQmtZWGtnSUNBOUlHUmhkR1V1WjJWMFJHRjBaU2dwTzF4dVhHNGdJQ0FnYVdZZ0tIbGxZWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWkdGMFpWd2lQbnR0YjI1MGFIMGdlMlJoZVgwc0lIdDVaV0Z5ZlR3dlpHbDJQbHh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JRWVdkbGMxTjBiM0psSUdaeWIyMGdYQ0l1TGk5emRHOXlaWE12Y0dGblpYTmZjM1J2Y21WY0lqdGNibWx0Y0c5eWRDQlFZV2RsVUhKbGRtbGxkeUJtY205dElGd2lMaTl3Y21WMmFXVjNYQ0k3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJoWjJWelNXNWtaWGdnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVYRzRnSUNBZ2RHaHBjeTV6ZEdGMFpTQTlJSHRjYmlBZ0lDQWdJSEJoWjJWek9pQlFZV2RsYzFOMGIzSmxMbWx1YzNRb0tTNXdZV2RsYzF4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhZZ2FXUTlYQ0p3WVdkbGMxd2lQbHh1SUNBZ0lDQWdJQ0I3ZEdocGN5NXlaVzVrWlhKUWNtVjJhV1YzY3lncGZWeHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjbEJ5WlhacFpYZHpLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFkyVnVkRkJoWjJWektDa3ViV0Z3S0daMWJtTjBhVzl1S0hCaFoyVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQThVR0ZuWlZCeVpYWnBaWGNnY0dGblpUMTdjR0ZuWlgwZ0x6NDdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J5WldObGJuUlFZV2RsY3lncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkR0YwWlM1d1lXZGxjeTV6YjNKMEtHWjFibU4wYVc5dUtHRXNZaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0V1WTNKbFlYUmxaRUYwSUQ0Z1lpNWpjbVZoZEdWa1FYUWdQeUF0TVNBNklERTdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JTYjNWMFpYSWdabkp2YlNCY0lpNHZjbTkxZEdWeVhDSTdYRzVwYlhCdmNuUWdjMlYwZEdsdVozTWdabkp2YlNCY0lpNHVMM04wYjNKbGN5OXpaWFIwYVc1bmMxd2lPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5Qk1ZWGx2ZFhRZ1pYaDBaVzVrY3lCU1pXRmpkQzVEYjIxd2IyNWxiblFnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1emRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUhScGRHeGxPaUFnYzJWMGRHbHVaM011ZEdsMGJHVXNYRzRnSUNBZ0lDQmhkWFJvYjNJNklITmxkSFJwYm1kekxtRjFkR2h2Y2x4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnWkc5amRXMWxiblF1ZEdsMGJHVWdQU0IwYUdsekxuTjBZWFJsTG5ScGRHeGxPMXh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGliMlI1UGx4dUlDQWdJQ0FnSUNBOGFHVmhaR1Z5UGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNHRmtaR2x1WjNOY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR4aElHaHlaV1k5WENJdlhDSWdZMnhoYzNOT1lXMWxQVndpYkc5bmIxd2lQbnR6WlhSMGFXNW5jeTUwYVhSc1pYMDhMMkUrWEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUR3dmFHVmhaR1Z5UGx4dUlDQWdJQ0FnSUNBOGJXRnBiajVjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5CaFpHUnBibWR6WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WVhKMGFXTnNaVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQRkp2ZFhSbGNpNUlZVzVrYkdWeUlDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyRnlkR2xqYkdVK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WVhOcFpHVStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDBhR2x6TG5CeWIzQnpMbk5wWkdWaVlYSjlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyRnphV1JsUGx4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOEwyMWhhVzQrWEc0Z0lDQWdJQ0FnSUR4bWIyOTBaWEkrWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKd1lXUmthVzVuYzF3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEhBK1EyOXdlWEpwWjJoMElDaERLU0F5TURFeUxYdHVaWGNnUkdGMFpTZ3BMbWRsZEVaMWJHeFpaV0Z5S0NsOUlIdHpaWFIwYVc1bmN5NWhkWFJvYjNKOVBDOXdQbHh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4TDJadmIzUmxjajVjYmlBZ0lDQWdJRHd2WW05a2VUNWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTWIyTnJaWElnWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUWdlMXh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2liRzlqYTJWeVhDSStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljM0JwYm01bGNsd2lQbHh1SUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNsY2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElGQmhaMlZ6VTNSdmNtVWdabkp2YlNCY0lpNHVMM04wYjNKbGN5OXdZV2RsYzE5emRHOXlaVndpTzF4dWFXMXdiM0owSUZCdmMzUkVZWFJsSUdaeWIyMGdYQ0l1TDJSaGRHVmNJanRjYm1sdGNHOXlkQ0JNYjJOclpYSWdabkp2YlNCY0lpNHZiRzlqYTJWeVhDSTdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQmhaMlZXYVdWM0lHVjRkR1Z1WkhNZ1VtVmhZM1F1UTI5dGNHOXVaVzUwSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmx4dUlDQWdJSFpoY2lCamRYSnlaVzUwWDNCaFoyVWdQU0JRWVdkbGMxTjBiM0psTG1acGJtUW9aRzlqZFcxbGJuUXViRzlqWVhScGIyNHVjR0YwYUc1aGJXVXBPMXh1WEc0Z0lDQWdkR2hwY3k1emRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUhCaFoyVTZJR04xY25KbGJuUmZjR0ZuWlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqZFhKeVpXNTBYM0JoWjJVdWIyNG9YQ0pzYjJGa1hDSXNJSFJvYVhNdVgzQmhaMlZNYjJGa1pXUXVZbWx1WkNoMGFHbHpLU2s3WEc0Z0lDQWdZM1Z5Y21WdWRGOXdZV2RsTG14dllXUW9LVHRjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0IyWVhJZ2NHRm5aU0E5SUhSb2FYTXVjM1JoZEdVdWNHRm5aVHRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luQmhaMlZjSWo1Y2JpQWdJQ0FnSUNBZ1BHZ3lJR05zWVhOelRtRnRaVDFjSW5ScGRHeGxYQ0krWEc0Z0lDQWdJQ0FnSUNBZ1BGQnZjM1JFWVhSbElHUmhkR1U5ZTNCaFoyVXVZM0psWVhSbFpFRjBmUzgrWEc0Z0lDQWdJQ0FnSUNBZ2UzQmhaMlV1ZEdsMGJHVjlYRzRnSUNBZ0lDQWdJRHd2YURJK1hHNGdJQ0FnSUNBZ0lEeHdQbHh1SUNBZ0lDQWdJQ0FnSUh0d1lXZGxMbUp2WkhrZ2ZId2djR0ZuWlM1bGVIUnlZV04wZlZ4dUlDQWdJQ0FnSUNBOEwzQStYRzVjYmlBZ0lDQWdJQ0FnZXlGd1lXZGxMbUp2WkhrZ0ppWWdQRXh2WTJ0bGNpOCtmVnh1SUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnS1Z4dUlDQjlYRzVjYmlBZ1gzQmhaMlZNYjJGa1pXUW9LU0I3WEc0Z0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN2JHOWhaR1ZrT2lCMGNuVmxmU2s3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCUWIzTjBSR0YwWlNCbWNtOXRJRndpTGk5a1lYUmxYQ0k3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJoWjJWUWNtVjJhV1YzSUdWNGRHVnVaSE1nVW1WaFkzUXVRMjl0Y0c5dVpXNTBJSHRjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUhaaGNpQndZV2RsSUQwZ2RHaHBjeTV3Y205d2N5NXdZV2RsTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljR0ZuWlNCd2NtVjJhV1YzWENJK1hHNGdJQ0FnSUNBZ0lEeG9NaUJqYkdGemMwNWhiV1U5WENKMGFYUnNaVndpUGx4dUlDQWdJQ0FnSUNBZ0lEeFFiM04wUkdGMFpTQmtZWFJsUFh0d1lXZGxMbU55WldGMFpXUkJkSDB2UGx4dUlDQWdJQ0FnSUNBZ0lEeGhJR2h5WldZOWUzQmhaMlV1Y0dGMGFIMCtlM0JoWjJVdWRHbDBiR1Y5UEM5aFBseHVJQ0FnSUNBZ0lDQThMMmd5UGx4dUlDQWdJQ0FnSUNBOGNENWNiaUFnSUNBZ0lDQWdJQ0I3Y0dGblpTNWxlSFJ5WVdOMGZWeHVJQ0FnSUNBZ0lDQThMM0ErWEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0oyWVhJZ1VtOTFkR1Z5SUQwZ1VtVmhZM1JTYjNWMFpYSTdYRzUyWVhJZ1VtOTFkR1VnSUQwZ1VtOTFkR1Z5TGxKdmRYUmxPMXh1WEc1cGJYQnZjblFnVUdGblpYTkpibVJsZUNCbWNtOXRJRndpTGk5cGJtUmxlRndpWEc1cGJYQnZjblFnVUdGblpWWnBaWGNnWm5KdmJTQmNJaTR2Y0dGblpWd2lYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ1kyOXVibVZqZERvZ1puVnVZM1JwYjI0b1FYQndLU0I3WEc0Z0lDQWdkbUZ5SUhKdmRYUmxjeUE5SUNoY2JpQWdJQ0FnSUR4U2IzVjBaU0JvWVc1a2JHVnlQWHRCY0hCOUlIQmhkR2c5WENJdlhDSStYRzRnSUNBZ0lDQWdJRHhTYjNWMFpTQndZWFJvUFZ3aUwxd2lJR2hoYm1Sc1pYSTllMUJoWjJWelNXNWtaWGg5SUM4K1hHNGdJQ0FnSUNBZ0lEeFNiM1YwWlNCd1lYUm9QVndpS2x3aUlHaGhibVJzWlhJOWUxQmhaMlZXYVdWM2ZTQXZQbHh1SUNBZ0lDQWdQQzlTYjNWMFpUNWNiaUFnSUNBcE8xeHVYRzRnSUNBZ1VtOTFkR1Z5TG5KMWJpaHliM1YwWlhNc0lGSnZkWFJsY2k1SWFYTjBiM0o1VEc5allYUnBiMjRzSUdaMWJtTjBhVzl1SUNoSVlXNWtiR1Z5S1NCN1hHNGdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbU5zWVhOelRtRnRaU0E5SUZ3aVhDSTdYRzRnSUNBZ0lDQlNaV0ZqZEM1eVpXNWtaWElvUEVoaGJtUnNaWEl2UGl3Z1pHOWpkVzFsYm5RdVltOWtlU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMHNYRzVjYmlBZ1NHRnVaR3hsY2pvZ1VtOTFkR1Z5TGxKdmRYUmxTR0Z1Wkd4bGNseHVmVHRjYmx4dVpHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0ltTnNhV05yWENJc0lHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNGdJSFpoY2lCc2FXNXJJRDBnWlhabGJuUXVkR0Z5WjJWMExDQjFjbXdnUFNCc2FXNXJMbWRsZEVGMGRISnBZblYwWlNoY0ltaHlaV1pjSWlrN1hHNGdJSFpoY2lCdFpYUmhYMnRsZVNBOUlHVjJaVzUwTG0xbGRHRkxaWGtnZkh3Z1pYWmxiblF1WVd4MFMyVjVJSHg4SUdWMlpXNTBMbU4wY214TFpYa2dmSHdnWlhabGJuUXVjMmhwWm5STFpYazdYRzVjYmlBZ2FXWWdLR1YyWlc1MExtSjFkSFJ2YmlBOVBUMGdNQ0FtSmlBaGJXVjBZVjlyWlhrZ0ppWWdiR2x1YXk1MFlXZE9ZVzFsSUQwOVBTQmNJa0ZjSWlBbUppQjFjbXhiTUYwZ1BUMDlJRndpTDF3aUtTQjdYRzRnSUNBZ1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQlNiM1YwWlhJdVNHbHpkRzl5ZVV4dlkyRjBhVzl1TG5CMWMyZ29kWEpzS1R0Y2JpQWdmVnh1ZlN3Z1ptRnNjMlVwTzF4dUlpd2lhVzF3YjNKMElIdEZkbVZ1ZEVWdGFYUjBaWEo5SUdaeWIyMGdYQ0psZG1WdWRITmNJanRjYm1sdGNHOXlkQ0JTWlhGMVpYTjBJR1p5YjIwZ1hDSXVMaTkxZEdsc2N5OXlaWEYxWlhOMFhDSTdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQmhaMlVnWlhoMFpXNWtjeUJGZG1WdWRFVnRhWFIwWlhJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lod1lYSmhiWE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjMXRyWlhsZElEMGdjR0Z5WVcxelcydGxlVjA3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYkc5aFpDZ3BJSHRjYmlBZ0lDQnVaWGNnVW1WeGRXVnpkQ2gwYUdsekxtWnBiR1VwTG1kbGRDaG1kVzVqZEdsdmJpaGtZWFJoS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbUp2WkhrZ1BTQmtZWFJoTzF4dUlDQWdJQ0FnZEdocGN5NWxiV2wwS0Z3aWJHOWhaRndpS1R0Y2JpQWdJQ0I5TG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMFYyWlc1MFJXMXBkSFJsY24wZ1puSnZiU0JjSW1WMlpXNTBjMXdpTzF4dWFXMXdiM0owSUZKbGNYVmxjM1FnWm5KdmJTQmNJaTR1TDNWMGFXeHpMM0psY1hWbGMzUmNJanRjYm1sdGNHOXlkQ0JRWVdkbElHWnliMjBnWENJdUwzQmhaMlZjSWp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVUdGblpYTlRkRzl5WlNCbGVIUmxibVJ6SUVWMlpXNTBSVzFwZEhSbGNpQjdYRzRnSUhOMFlYUnBZeUJwYm5OMEtDa2dlMXh1SUNBZ0lDRjBhR2x6TGw5cGJuTjBJQ1ltSUNoMGFHbHpMbDlwYm5OMElEMGdibVYzSUZCaFoyVnpVM1J2Y21Vb0tTazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1YzNRN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1ptbHVaQ2h3WVhSb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzV6ZENncExuQmhaMlZ6TG1acGJIUmxjaWhtZFc1amRHbHZiaWh3WVdkbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NHRm5aUzV3WVhSb0lEMDlJSEJoZEdnN1hHNGdJQ0FnZlNsYk1GMDdYRzRnSUgxY2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dUlDQWdJSFJvYVhNdWNHRm5aWE1nUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11Ykc5aFpDZ3BPMXh1SUNCOVhHNWNiaUFnYkc5aFpDZ3BJSHRjYmlBZ0lDQnVaWGNnVW1WeGRXVnpkQ2hjSWk5emFYUmxiV0Z3TG5odGJGd2lLUzVuWlhRb1puVnVZM1JwYjI0b1pHRjBZU3dnZUdoeUtTQjdYRzRnSUNBZ0lDQjJZWElnZFhKc2N5QTlJSGhvY2k1eVpYTndiMjV6WlZoTlRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tGd2lkWEpzWENJcE8xeHVJQ0FnSUNBZ2RHaHBjeTV3WVdkbGN5QTlJRnRkTG5Oc2FXTmxMbU5oYkd3b2RYSnNjeWt1YldGd0tHWjFibU4wYVc5dUtIVnliQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQmhaMlVvZEdocGN5NWxlSFJ5WVdOMFJHRjBZU2gxY213cEtUdGNiaUFnSUNBZ0lIMHVZbWx1WkNoMGFHbHpLU2s3WEc0Z0lDQWdJQ0IwYUdsekxtVnRhWFFvWENKc2IyRmtYQ0lwTzF4dUlDQWdJSDB1WW1sdVpDaDBhR2x6S1NrN1hHNGdJSDFjYmx4dUlDQmxlSFJ5WVdOMFJHRjBZU2gxY213cElIdGNiaUFnSUNCMllYSWdaR0YwWVNBOUlIdGNiaUFnSUNBZ0lIQmhkR2c2SUNBZ0lDQWdLSFZ5YkM1eGRXVnllVk5sYkdWamRHOXlLRndpYkc5alhDSXBJQ0FnSUNBZ2ZId2dlMzBwTG5SbGVIUkRiMjUwWlc1MExGeHVJQ0FnSUNBZ1kzSmxZWFJsWkVGME9pQW9kWEpzTG5GMVpYSjVVMlZzWldOMGIzSW9YQ0pzWVhOMGJXOWtYQ0lwSUNCOGZDQjdmU2t1ZEdWNGRFTnZiblJsYm5Rc1hHNGdJQ0FnSUNCbWFXeGxPaUFnSUNBZ0lDaDFjbXd1Y1hWbGNubFRaV3hsWTNSdmNpaGNJbVpwYkdWc2IyTmNJaWtnSUh4OElIdDlLUzUwWlhoMFEyOXVkR1Z1ZEN4Y2JpQWdJQ0FnSUdOaGRHVm5iM0o1T2lBZ0tIVnliQzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lZMkYwWldkdmNubGNJaWtnZkh3Z2UzMHBMblJsZUhSRGIyNTBaVzUwTEZ4dUlDQWdJQ0FnZEdGbmN6b2dJQ0FnSUNBb2RYSnNMbkYxWlhKNVUyVnNaV04wYjNJb1hDSjBZV2R6WENJcElDQWdJQ0I4ZkNCN2ZTa3VkR1Y0ZEVOdmJuUmxiblFzWEc0Z0lDQWdJQ0IwYVhSc1pUb2dJQ0FnSUNoMWNtd3VjWFZsY25sVFpXeGxZM1J2Y2loY0luUnBkR3hsWENJcElDQWdJSHg4SUh0OUtTNTBaWGgwUTI5dWRHVnVkQ3hjYmlBZ0lDQWdJR1Y0ZEhKaFkzUTZJQ0FnS0hWeWJDNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aVpYaDBjbUZqZEZ3aUtTQWdmSHdnZTMwcExuUmxlSFJEYjI1MFpXNTBYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lIUnllU0I3SUdSaGRHRXVjR0YwYUNBOUlHUmhkR0V1Y0dGMGFDNXpjR3hwZENoY0lpNWpiMjFjSWlrdWNHOXdLQ2s3SUgwZ1kyRjBZMmdvWlNrZ2UzMWNiaUFnSUNCMGNua2dleUJrWVhSaExuUmhaM01nUFNCa1lYUmhMblJoWjNNdWMzQnNhWFFvWENJc1hDSXBPeUI5SUdOaGRHTm9LR1VwSUh0OVhHNGdJQ0FnZEhKNUlIc2daR0YwWVM1amNtVmhkR1ZrUVhRZ1BTQnVaWGNnUkdGMFpTaGtZWFJoTG1OeVpXRjBaV1JCZENrN0lIMGdZMkYwWTJnb1pTa2dlMzFjYmx4dUlDQWdJSEpsZEhWeWJpQmtZWFJoTzF4dUlDQjlYRzU5WEc0aUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJSFJwZEd4bE9pQWdYQ0pPYVd0dmJHRjVMbFJvWlU5emIyMWNJaXhjYmlBZ1lYVjBhRzl5T2lCY0lrNXBhMjlzWVhrZ1RtVnRjMmhwYkc5MlhDSmNibjA3WEc0aUxDSXZLaXBjYmlBcUlFRWdaSFZ0WWlCemFXMXdiR1VnV0VoU0xtZGxkQ0IwYUdsdVoxeHVJQ292WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlNaWEYxWlhOMElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2RYSnNLU0I3WEc0Z0lDQWdkR2hwY3k1MWNtd2dQU0IxY213N1hHNGdJSDFjYmx4dUlDQm5aWFFvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0IyWVhJZ2VHaHlJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hHNGdJQ0FnZUdoeUxtOXdaVzRvWENKSFJWUmNJaXdnZEdocGN5NTFjbXdzSUhSeWRXVXBPMXh1WEc0Z0lDQWdlR2h5TG05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjbVZoWkhsVGRHRjBaU0E5UFQwZ05DQW1KaUIwYUdsekxuTjBZWFIxY3lBK1BTQXlNREFnSmlZZ2RHaHBjeTV6ZEdGMGRYTWdQQ0F6TURBcElIdGNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkyc29kR2hwY3k1eVpYTndiMjV6WlZSbGVIUXNJSFJvYVhNcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCNGFISXVjMlZ1WkNncE8xeHVJQ0I5WEc1Y2JpQWdaMlYwU2xOUFRpaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lIUm9hWE11WjJWMEtHWjFibU4wYVc5dUtHUmhkR0VwSUh0Y2JpQWdJQ0FnSUdOaGJHeGlZV05yS0VwVFQwNHVjR0Z5YzJVb1pHRjBZU2twTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnU205NVpXNTBMQ0JKYm1NdUlHRnVaQ0J2ZEdobGNpQk9iMlJsSUdOdmJuUnlhV0oxZEc5eWN5NWNiaTh2WEc0dkx5QlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lWeHVMeThnWTI5d2VTQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdSdlkzVnRaVzUwWVhScGIyNGdabWxzWlhNZ0tIUm9aVnh1THk4Z1hDSlRiMlowZDJGeVpWd2lLU3dnZEc4Z1pHVmhiQ0JwYmlCMGFHVWdVMjltZEhkaGNtVWdkMmwwYUc5MWRDQnlaWE4wY21samRHbHZiaXdnYVc1amJIVmthVzVuWEc0dkx5QjNhWFJvYjNWMElHeHBiV2wwWVhScGIyNGdkR2hsSUhKcFoyaDBjeUIwYnlCMWMyVXNJR052Y0hrc0lHMXZaR2xtZVN3Z2JXVnlaMlVzSUhCMVlteHBjMmdzWEc0dkx5QmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTENCaGJtUWdkRzhnY0dWeWJXbDBYRzR2THlCd1pYSnpiMjV6SUhSdklIZG9iMjBnZEdobElGTnZablIzWVhKbElHbHpJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVmNiaTh2SUdadmJHeHZkMmx1WnlCamIyNWthWFJwYjI1ek9seHVMeTljYmk4dklGUm9aU0JoWW05MlpTQmpiM0I1Y21sbmFIUWdibTkwYVdObElHRnVaQ0IwYUdseklIQmxjbTFwYzNOcGIyNGdibTkwYVdObElITm9ZV3hzSUdKbElHbHVZMngxWkdWa1hHNHZMeUJwYmlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmk4dlhHNHZMeUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5UWEc0dkx5QlBVaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHWEc0dkx5Qk5SVkpEU0VGT1ZFRkNTVXhKVkZrc0lFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9YRzR2THlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VVZ1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN4Y2JpOHZJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSWdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVseHVMeThnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlZ4dUx5OGdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT0lGUklSU0JUVDBaVVYwRlNSUzVjYmx4dVpuVnVZM1JwYjI0Z1JYWmxiblJGYldsMGRHVnlLQ2tnZTF4dUlDQjBhR2x6TGw5bGRtVnVkSE1nUFNCMGFHbHpMbDlsZG1WdWRITWdmSHdnZTMwN1hHNGdJSFJvYVhNdVgyMWhlRXhwYzNSbGJtVnljeUE5SUhSb2FYTXVYMjFoZUV4cGMzUmxibVZ5Y3lCOGZDQjFibVJsWm1sdVpXUTdYRzU5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVWMlpXNTBSVzFwZEhSbGNqdGNibHh1THk4Z1FtRmphM2RoY21SekxXTnZiWEJoZENCM2FYUm9JRzV2WkdVZ01DNHhNQzU0WEc1RmRtVnVkRVZ0YVhSMFpYSXVSWFpsYm5SRmJXbDBkR1Z5SUQwZ1JYWmxiblJGYldsMGRHVnlPMXh1WEc1RmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMbDlsZG1WdWRITWdQU0IxYm1SbFptbHVaV1E3WEc1RmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMbDl0WVhoTWFYTjBaVzVsY25NZ1BTQjFibVJsWm1sdVpXUTdYRzVjYmk4dklFSjVJR1JsWm1GMWJIUWdSWFpsYm5SRmJXbDBkR1Z5Y3lCM2FXeHNJSEJ5YVc1MElHRWdkMkZ5Ym1sdVp5QnBaaUJ0YjNKbElIUm9ZVzRnTVRBZ2JHbHpkR1Z1WlhKeklHRnlaVnh1THk4Z1lXUmtaV1FnZEc4Z2FYUXVJRlJvYVhNZ2FYTWdZU0IxYzJWbWRXd2daR1ZtWVhWc2RDQjNhR2xqYUNCb1pXeHdjeUJtYVc1a2FXNW5JRzFsYlc5eWVTQnNaV0ZyY3k1Y2JrVjJaVzUwUlcxcGRIUmxjaTVrWldaaGRXeDBUV0Y0VEdsemRHVnVaWEp6SUQwZ01UQTdYRzVjYmk4dklFOWlkbWx2ZFhOc2VTQnViM1FnWVd4c0lFVnRhWFIwWlhKeklITm9iM1ZzWkNCaVpTQnNhVzFwZEdWa0lIUnZJREV3TGlCVWFHbHpJR1oxYm1OMGFXOXVJR0ZzYkc5M2MxeHVMeThnZEdoaGRDQjBieUJpWlNCcGJtTnlaV0Z6WldRdUlGTmxkQ0IwYnlCNlpYSnZJR1p2Y2lCMWJteHBiV2wwWldRdVhHNUZkbVZ1ZEVWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG5ObGRFMWhlRXhwYzNSbGJtVnljeUE5SUdaMWJtTjBhVzl1S0c0cElIdGNiaUFnYVdZZ0tDRnBjMDUxYldKbGNpaHVLU0I4ZkNCdUlEd2dNQ0I4ZkNCcGMwNWhUaWh1S1NsY2JpQWdJQ0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMjRnYlhWemRDQmlaU0JoSUhCdmMybDBhWFpsSUc1MWJXSmxjaWNwTzF4dUlDQjBhR2x6TGw5dFlYaE1hWE4wWlc1bGNuTWdQU0J1TzF4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNia1YyWlc1MFJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdVpXMXBkQ0E5SUdaMWJtTjBhVzl1S0hSNWNHVXBJSHRjYmlBZ2RtRnlJR1Z5TENCb1lXNWtiR1Z5TENCc1pXNHNJR0Z5WjNNc0lHa3NJR3hwYzNSbGJtVnljenRjYmx4dUlDQnBaaUFvSVhSb2FYTXVYMlYyWlc1MGN5bGNiaUFnSUNCMGFHbHpMbDlsZG1WdWRITWdQU0I3ZlR0Y2JseHVJQ0F2THlCSlppQjBhR1Z5WlNCcGN5QnVieUFuWlhKeWIzSW5JR1YyWlc1MElHeHBjM1JsYm1WeUlIUm9aVzRnZEdoeWIzY3VYRzRnSUdsbUlDaDBlWEJsSUQwOVBTQW5aWEp5YjNJbktTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhNdVpYSnliM0lnZkh4Y2JpQWdJQ0FnSUNBZ0tHbHpUMkpxWldOMEtIUm9hWE11WDJWMlpXNTBjeTVsY25KdmNpa2dKaVlnSVhSb2FYTXVYMlYyWlc1MGN5NWxjbkp2Y2k1c1pXNW5kR2dwS1NCN1hHNGdJQ0FnSUNCbGNpQTlJR0Z5WjNWdFpXNTBjMXN4WFR0Y2JpQWdJQ0FnSUdsbUlDaGxjaUJwYm5OMFlXNWpaVzltSUVWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1Z5T3lBdkx5QlZibWhoYm1Sc1pXUWdKMlZ5Y205eUp5QmxkbVZ1ZEZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RWYm1OaGRXZG9kQ3dnZFc1emNHVmphV1pwWldRZ1hDSmxjbkp2Y2x3aUlHVjJaVzUwTGljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHaGhibVJzWlhJZ1BTQjBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMDdYRzVjYmlBZ2FXWWdLR2x6Vlc1a1pXWnBibVZrS0doaGJtUnNaWElwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb2FYTkdkVzVqZEdsdmJpaG9ZVzVrYkdWeUtTa2dlMXh1SUNBZ0lITjNhWFJqYUNBb1lYSm5kVzFsYm5SekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0x5OGdabUZ6ZENCallYTmxjMXh1SUNBZ0lDQWdZMkZ6WlNBeE9seHVJQ0FnSUNBZ0lDQm9ZVzVrYkdWeUxtTmhiR3dvZEdocGN5azdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1kyRnpaU0F5T2x4dUlDQWdJQ0FnSUNCb1lXNWtiR1Z5TG1OaGJHd29kR2hwY3l3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSURNNlhHNGdJQ0FnSUNBZ0lHaGhibVJzWlhJdVkyRnNiQ2gwYUdsekxDQmhjbWQxYldWdWRITmJNVjBzSUdGeVozVnRaVzUwYzFzeVhTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0x5OGdjMnh2ZDJWeVhHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCc1pXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0JoY21keklEMGdibVYzSUVGeWNtRjVLR3hsYmlBdElERXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHa2dQU0F4T3lCcElEd2diR1Z1T3lCcEt5c3BYRzRnSUNBZ0lDQWdJQ0FnWVhKbmMxdHBJQzBnTVYwZ1BTQmhjbWQxYldWdWRITmJhVjA3WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaWEl1WVhCd2JIa29kR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHbHpUMkpxWldOMEtHaGhibVJzWlhJcEtTQjdYRzRnSUNBZ2JHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHRjYmlBZ0lDQmhjbWR6SUQwZ2JtVjNJRUZ5Y21GNUtHeGxiaUF0SURFcE8xeHVJQ0FnSUdadmNpQW9hU0E5SURFN0lHa2dQQ0JzWlc0N0lHa3JLeWxjYmlBZ0lDQWdJR0Z5WjNOYmFTQXRJREZkSUQwZ1lYSm5kVzFsYm5SelcybGRPMXh1WEc0Z0lDQWdiR2x6ZEdWdVpYSnpJRDBnYUdGdVpHeGxjaTV6YkdsalpTZ3BPMXh1SUNBZ0lHeGxiaUE5SUd4cGMzUmxibVZ5Y3k1c1pXNW5kR2c3WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHeGxianNnYVNzcktWeHVJQ0FnSUNBZ2JHbHpkR1Z1WlhKelcybGRMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozTXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJ5ZFdVN1hHNTlPMXh1WEc1RmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMbUZrWkV4cGMzUmxibVZ5SUQwZ1puVnVZM1JwYjI0b2RIbHdaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdkbUZ5SUcwN1hHNWNiaUFnYVdZZ0tDRnBjMFoxYm1OMGFXOXVLR3hwYzNSbGJtVnlLU2xjYmlBZ0lDQjBhSEp2ZHlCVWVYQmxSWEp5YjNJb0oyeHBjM1JsYm1WeUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpY3BPMXh1WEc0Z0lHbG1JQ2doZEdocGN5NWZaWFpsYm5SektWeHVJQ0FnSUhSb2FYTXVYMlYyWlc1MGN5QTlJSHQ5TzF4dVhHNGdJQzh2SUZSdklHRjJiMmxrSUhKbFkzVnljMmx2YmlCcGJpQjBhR1VnWTJGelpTQjBhR0YwSUhSNWNHVWdQVDA5SUZ3aWJtVjNUR2x6ZEdWdVpYSmNJaUVnUW1WbWIzSmxYRzRnSUM4dklHRmtaR2x1WnlCcGRDQjBieUIwYUdVZ2JHbHpkR1Z1WlhKekxDQm1hWEp6ZENCbGJXbDBJRndpYm1WM1RHbHpkR1Z1WlhKY0lpNWNiaUFnYVdZZ0tIUm9hWE11WDJWMlpXNTBjeTV1WlhkTWFYTjBaVzVsY2lsY2JpQWdJQ0IwYUdsekxtVnRhWFFvSjI1bGQweHBjM1JsYm1WeUp5d2dkSGx3WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOR2RXNWpkR2x2Ymloc2FYTjBaVzVsY2k1c2FYTjBaVzVsY2lrZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBaVzVsY2k1c2FYTjBaVzVsY2lBNklHeHBjM1JsYm1WeUtUdGNibHh1SUNCcFppQW9JWFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYU2xjYmlBZ0lDQXZMeUJQY0hScGJXbDZaU0IwYUdVZ1kyRnpaU0J2WmlCdmJtVWdiR2x6ZEdWdVpYSXVJRVJ2YmlkMElHNWxaV1FnZEdobElHVjRkSEpoSUdGeWNtRjVJRzlpYW1WamRDNWNiaUFnSUNCMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwZ1BTQnNhWE4wWlc1bGNqdGNiaUFnWld4elpTQnBaaUFvYVhOUFltcGxZM1FvZEdocGN5NWZaWFpsYm5SelczUjVjR1ZkS1NsY2JpQWdJQ0F2THlCSlppQjNaU2QyWlNCaGJISmxZV1I1SUdkdmRDQmhiaUJoY25KaGVTd2dhblZ6ZENCaGNIQmxibVF1WEc0Z0lDQWdkR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRMbkIxYzJnb2JHbHpkR1Z1WlhJcE8xeHVJQ0JsYkhObFhHNGdJQ0FnTHk4Z1FXUmthVzVuSUhSb1pTQnpaV052Ym1RZ1pXeGxiV1Z1ZEN3Z2JtVmxaQ0IwYnlCamFHRnVaMlVnZEc4Z1lYSnlZWGt1WEc0Z0lDQWdkR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRJRDBnVzNSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFN3Z2JHbHpkR1Z1WlhKZE8xeHVYRzRnSUM4dklFTm9aV05ySUdadmNpQnNhWE4wWlc1bGNpQnNaV0ZyWEc0Z0lHbG1JQ2hwYzA5aWFtVmpkQ2gwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjBwSUNZbUlDRjBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMHVkMkZ5Ym1Wa0tTQjdYRzRnSUNBZ2RtRnlJRzA3WEc0Z0lDQWdhV1lnS0NGcGMxVnVaR1ZtYVc1bFpDaDBhR2x6TGw5dFlYaE1hWE4wWlc1bGNuTXBLU0I3WEc0Z0lDQWdJQ0J0SUQwZ2RHaHBjeTVmYldGNFRHbHpkR1Z1WlhKek8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J0SUQwZ1JYWmxiblJGYldsMGRHVnlMbVJsWm1GMWJIUk5ZWGhNYVhOMFpXNWxjbk03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0cwZ0ppWWdiU0ErSURBZ0ppWWdkR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRMbXhsYm1kMGFDQStJRzBwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFM1M1lYSnVaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnbktHNXZaR1VwSUhkaGNtNXBibWM2SUhCdmMzTnBZbXhsSUVWMlpXNTBSVzFwZEhSbGNpQnRaVzF2Y25rZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkc1pXRnJJR1JsZEdWamRHVmtMaUFsWkNCc2FYTjBaVzVsY25NZ1lXUmtaV1F1SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVlhObElHVnRhWFIwWlhJdWMyVjBUV0Y0VEdsemRHVnVaWEp6S0NrZ2RHOGdhVzVqY21WaGMyVWdiR2x0YVhRdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaWFpsYm5SelczUjVjR1ZkTG14bGJtZDBhQ2s3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJuTnZiR1V1ZEhKaFkyVWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdMeThnYm05MElITjFjSEJ2Y25SbFpDQnBiaUJKUlNBeE1GeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuUnlZV05sS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNUZkbVZ1ZEVWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG05dUlEMGdSWFpsYm5SRmJXbDBkR1Z5TG5CeWIzUnZkSGx3WlM1aFpHUk1hWE4wWlc1bGNqdGNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXZibU5sSUQwZ1puVnVZM1JwYjI0b2RIbHdaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdhV1lnS0NGcGMwWjFibU4wYVc5dUtHeHBjM1JsYm1WeUtTbGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvSjJ4cGMzUmxibVZ5SUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVYRzRnSUhaaGNpQm1hWEpsWkNBOUlHWmhiSE5sTzF4dVhHNGdJR1oxYm1OMGFXOXVJR2NvS1NCN1hHNGdJQ0FnZEdocGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2loMGVYQmxMQ0JuS1R0Y2JseHVJQ0FnSUdsbUlDZ2habWx5WldRcElIdGNiaUFnSUNBZ0lHWnBjbVZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR3hwYzNSbGJtVnlMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1p5NXNhWE4wWlc1bGNpQTlJR3hwYzNSbGJtVnlPMXh1SUNCMGFHbHpMbTl1S0hSNWNHVXNJR2NwTzF4dVhHNGdJSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1THk4Z1pXMXBkSE1nWVNBbmNtVnRiM1psVEdsemRHVnVaWEluSUdWMlpXNTBJR2xtWmlCMGFHVWdiR2x6ZEdWdVpYSWdkMkZ6SUhKbGJXOTJaV1JjYmtWMlpXNTBSVzFwZEhSbGNpNXdjbTkwYjNSNWNHVXVjbVZ0YjNabFRHbHpkR1Z1WlhJZ1BTQm1kVzVqZEdsdmJpaDBlWEJsTENCc2FYTjBaVzVsY2lrZ2UxeHVJQ0IyWVhJZ2JHbHpkQ3dnY0c5emFYUnBiMjRzSUd4bGJtZDBhQ3dnYVR0Y2JseHVJQ0JwWmlBb0lXbHpSblZ1WTNScGIyNG9iR2x6ZEdWdVpYSXBLVnh1SUNBZ0lIUm9jbTkzSUZSNWNHVkZjbkp2Y2lnbmJHbHpkR1Z1WlhJZ2JYVnpkQ0JpWlNCaElHWjFibU4wYVc5dUp5azdYRzVjYmlBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhNZ2ZId2dJWFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYU2xjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQnNhWE4wSUQwZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZE8xeHVJQ0JzWlc1bmRHZ2dQU0JzYVhOMExteGxibWQwYUR0Y2JpQWdjRzl6YVhScGIyNGdQU0F0TVR0Y2JseHVJQ0JwWmlBb2JHbHpkQ0E5UFQwZ2JHbHpkR1Z1WlhJZ2ZIeGNiaUFnSUNBZ0lDaHBjMFoxYm1OMGFXOXVLR3hwYzNRdWJHbHpkR1Z1WlhJcElDWW1JR3hwYzNRdWJHbHpkR1Z1WlhJZ1BUMDlJR3hwYzNSbGJtVnlLU2tnZTF4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMDdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyVjJaVzUwY3k1eVpXMXZkbVZNYVhOMFpXNWxjaWxjYmlBZ0lDQWdJSFJvYVhNdVpXMXBkQ2duY21WdGIzWmxUR2x6ZEdWdVpYSW5MQ0IwZVhCbExDQnNhWE4wWlc1bGNpazdYRzVjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMDlpYW1WamRDaHNhWE4wS1NrZ2UxeHVJQ0FnSUdadmNpQW9hU0E5SUd4bGJtZDBhRHNnYVMwdElENGdNRHNwSUh0Y2JpQWdJQ0FnSUdsbUlDaHNhWE4wVzJsZElEMDlQU0JzYVhOMFpXNWxjaUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lDaHNhWE4wVzJsZExteHBjM1JsYm1WeUlDWW1JR3hwYzNSYmFWMHViR2x6ZEdWdVpYSWdQVDA5SUd4cGMzUmxibVZ5S1NrZ2UxeHVJQ0FnSUNBZ0lDQndiM05wZEdsdmJpQTlJR2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h3YjNOcGRHbHZiaUE4SURBcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNibHh1SUNBZ0lHbG1JQ2hzYVhOMExteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnYkdsemRDNXNaVzVuZEdnZ1BTQXdPMXh1SUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WDJWMlpXNTBjMXQwZVhCbFhUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYkdsemRDNXpjR3hwWTJVb2NHOXphWFJwYjI0c0lERXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWxkbVZ1ZEhNdWNtVnRiM1psVEdsemRHVnVaWElwWEc0Z0lDQWdJQ0IwYUdsekxtVnRhWFFvSjNKbGJXOTJaVXhwYzNSbGJtVnlKeXdnZEhsd1pTd2diR2x6ZEdWdVpYSXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1RmRtVnVkRVZ0YVhSMFpYSXVjSEp2ZEc5MGVYQmxMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeUE5SUdaMWJtTjBhVzl1S0hSNWNHVXBJSHRjYmlBZ2RtRnlJR3RsZVN3Z2JHbHpkR1Z1WlhKek8xeHVYRzRnSUdsbUlDZ2hkR2hwY3k1ZlpYWmxiblJ6S1Z4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dVhHNGdJQzh2SUc1dmRDQnNhWE4wWlc1cGJtY2dabTl5SUhKbGJXOTJaVXhwYzNSbGJtVnlMQ0J1YnlCdVpXVmtJSFJ2SUdWdGFYUmNiaUFnYVdZZ0tDRjBhR2x6TGw5bGRtVnVkSE11Y21WdGIzWmxUR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01DbGNiaUFnSUNBZ0lIUm9hWE11WDJWMlpXNTBjeUE5SUh0OU8xeHVJQ0FnSUdWc2MyVWdhV1lnS0hSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFNsY2JpQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjA3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibHh1SUNBdkx5QmxiV2wwSUhKbGJXOTJaVXhwYzNSbGJtVnlJR1p2Y2lCaGJHd2diR2x6ZEdWdVpYSnpJRzl1SUdGc2JDQmxkbVZ1ZEhOY2JpQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQm1iM0lnS0d0bGVTQnBiaUIwYUdsekxsOWxkbVZ1ZEhNcElIdGNiaUFnSUNBZ0lHbG1JQ2hyWlhrZ1BUMDlJQ2R5WlcxdmRtVk1hWE4wWlc1bGNpY3BJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdkR2hwY3k1eVpXMXZkbVZCYkd4TWFYTjBaVzVsY25Nb2EyVjVLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1vSjNKbGJXOTJaVXhwYzNSbGJtVnlKeWs3WEc0Z0lDQWdkR2hwY3k1ZlpYWmxiblJ6SUQwZ2UzMDdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0JzYVhOMFpXNWxjbk1nUFNCMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwN1hHNWNiaUFnYVdZZ0tHbHpSblZ1WTNScGIyNG9iR2x6ZEdWdVpYSnpLU2tnZTF4dUlDQWdJSFJvYVhNdWNtVnRiM1psVEdsemRHVnVaWElvZEhsd1pTd2diR2x6ZEdWdVpYSnpLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCTVNVWlBJRzl5WkdWeVhHNGdJQ0FnZDJocGJHVWdLR3hwYzNSbGJtVnljeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQjBhR2x6TG5KbGJXOTJaVXhwYzNSbGJtVnlLSFI1Y0dVc0lHeHBjM1JsYm1WeWMxdHNhWE4wWlc1bGNuTXViR1Z1WjNSb0lDMGdNVjBwTzF4dUlDQjlYRzRnSUdSbGJHVjBaU0IwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjA3WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExteHBjM1JsYm1WeWN5QTlJR1oxYm1OMGFXOXVLSFI1Y0dVcElIdGNiaUFnZG1GeUlISmxkRHRjYmlBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhNZ2ZId2dJWFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYU2xjYmlBZ0lDQnlaWFFnUFNCYlhUdGNiaUFnWld4elpTQnBaaUFvYVhOR2RXNWpkR2x2YmloMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwcEtWeHVJQ0FnSUhKbGRDQTlJRnQwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjFkTzF4dUlDQmxiSE5sWEc0Z0lDQWdjbVYwSUQwZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZExuTnNhV05sS0NrN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWJHbHpkR1Z1WlhKRGIzVnVkQ0E5SUdaMWJtTjBhVzl1S0dWdGFYUjBaWElzSUhSNWNHVXBJSHRjYmlBZ2RtRnlJSEpsZER0Y2JpQWdhV1lnS0NGbGJXbDBkR1Z5TGw5bGRtVnVkSE1nZkh3Z0lXVnRhWFIwWlhJdVgyVjJaVzUwYzF0MGVYQmxYU2xjYmlBZ0lDQnlaWFFnUFNBd08xeHVJQ0JsYkhObElHbG1JQ2hwYzBaMWJtTjBhVzl1S0dWdGFYUjBaWEl1WDJWMlpXNTBjMXQwZVhCbFhTa3BYRzRnSUNBZ2NtVjBJRDBnTVR0Y2JpQWdaV3h6WlZ4dUlDQWdJSEpsZENBOUlHVnRhWFIwWlhJdVgyVjJaVzUwYzF0MGVYQmxYUzVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUJ5WlhRN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCcGMwWjFibU4wYVc5dUtHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjJaMWJtTjBhVzl1Snp0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOT2RXMWlaWElvWVhKbktTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp6dGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTlBZbXBsWTNRb1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCaGNtY2dJVDA5SUc1MWJHdzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpWVzVrWldacGJtVmtLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUQwOVBTQjJiMmxrSURBN1hHNTlYRzRpWFgwPVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9