!function e(t,n,r){function o(i,u){if(!n[i]){if(!t[i]){var s="function"==typeof require&&require;if(!u&&s)return s(i,!0);if(a)return a(i,!0);var l=new Error("Cannot find module '"+i+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[i]={exports:{}};t[i][0].call(c.exports,function(e){var n=t[i][1][e];return o(n?n:e)},c,c.exports,e,t,n,r)}return n[i].exports}for(var a="function"==typeof require&&require,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=e("./components/router"),s=r(u),l=e("./components/layout"),c=r(l),f=e("./stores/pages_store"),p=r(f),h=function(e){function t(){o(this,t),null!=e&&e.apply(this,arguments)}return a(t,e),i(t,[{key:"render",value:function(){return React.createElement(c["default"],{sidebar:"Sidebar"})}}]),t}(React.Component);p["default"].inst().on("load",function(){s["default"].connect(h)})},{"./components/layout":5,"./components/router":9,"./stores/pages_store":12}],2:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),a(t,[{key:"componentDidMount",value:function(){this.highlightCode()}},{key:"componentDidUpdate",value:function(){this.highlightCode()}},{key:"render",value:function(){return React.createElement("div",{dangerouslySetInnerHTML:{__html:this.props.body}})}},{key:"highlightCode",value:function(){for(var e=React.findDOMNode(this),t=e.querySelectorAll("pre code"),n=0;n<t.length;n++)hljs.highlightBlock(t[n])}}]),t}(React.Component);n["default"]=i,t.exports=n["default"]},{}],3:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],u=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),a(t,[{key:"render",value:function(){var e=this.props.date,t=e.getFullYear(),n=i[e.getMonth()],r=e.getDate();return t?React.createElement("div",{className:"date"},n," ",r,", ",t):null}}]),t}(React.Component);n["default"]=u,t.exports=n["default"]},{}],4:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,a=t,i=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,a);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(i)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=a,n=i,r=!0}},s=e("../stores/pages_store"),l=r(s),c=e("./preview"),f=r(c),p=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.state={pages:l["default"].inst().pages}}return a(t,e),i(t,[{key:"render",value:function(){return React.createElement("article",{className:"pages"},this.renderPreviews())}},{key:"renderPreviews",value:function(){return this.recentPages().map(function(e){return React.createElement(f["default"],{page:e})})}},{key:"recentPages",value:function(){return this.state.pages.sort(function(e,t){return e.createdAt>t.createdAt?-1:1})}}]),t}(React.Component);n["default"]=p,t.exports=n["default"]},{"../stores/pages_store":12,"./preview":8}],5:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,a=t,i=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,a);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(i)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=a,n=i,r=!0}},s=e("./router"),l=r(s),c=e("../stores/settings"),f=r(c),p=e("../stores/pages_store"),h=r(p),v=e("./sidebar"),d=r(v),y=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.state={title:f["default"].title,author:f["default"].author}}return a(t,e),i(t,[{key:"render",value:function(){var e=h["default"].currentPage();return document.title=this.state.title,React.createElement("body",null,React.createElement("header",null,React.createElement("div",{className:"paddings"},React.createElement("a",{href:"/",className:"logo"},f["default"].title),React.createElement("h1",{className:"intro"},e&&e.category||f["default"].title))),React.createElement("main",null,React.createElement("div",{className:"paddings"},React.createElement(l["default"].Handler,null),React.createElement(d["default"],null))),React.createElement("footer",null,React.createElement("div",{className:"paddings"},React.createElement("p",null,"Copyright (C) 2012-",(new Date).getFullYear()," ",f["default"].author))))}}]),t}(React.Component);n["default"]=y,t.exports=n["default"]},{"../stores/pages_store":12,"../stores/settings":13,"./router":9,"./sidebar":10}],6:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),a(t,[{key:"render",value:function(){return React.createElement("div",{className:"locker"},React.createElement("div",{className:"spinner"}))}}]),t}(React.Component);n["default"]=i,t.exports=n["default"]},{}],7:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,a=t,i=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,a);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(i)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=a,n=i,r=!0}},s=e("../stores/pages_store"),l=r(s),c=e("./content"),f=r(c),p=e("./date"),h=r(p),v=e("./locker"),d=r(v),y=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this);var e=l["default"].currentPage();e.on("load",this._pageLoaded.bind(this)),e.load(),this.state={page:e}}return a(t,e),i(t,[{key:"render",value:function(){var e=this.state.page;return React.createElement("article",{className:"page"},React.createElement(h["default"],{date:e.createdAt}),React.createElement(f["default"],{body:e.body||e.extract}),!e.body&&React.createElement(d["default"],null),React.createElement("p",null,React.createElement("a",{href:"/"},"<- Other posts")))}},{key:"_pageLoaded",value:function(){this.setState({loaded:!0})}}]),t}(React.Component);n["default"]=y,t.exports=n["default"]},{"../stores/pages_store":12,"./content":2,"./date":3,"./locker":6}],8:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=e("./date"),s=r(u),l=e("./content"),c=r(l),f=function(e){function t(){o(this,t),null!=e&&e.apply(this,arguments)}return a(t,e),i(t,[{key:"render",value:function(){var e=this.props.page;return React.createElement("section",{className:"page preview"},React.createElement(s["default"],{date:e.createdAt}),React.createElement("h2",null,React.createElement("a",{href:e.path},e.title)),React.createElement(c["default"],{body:e.extract}))}}]),t}(React.Component);n["default"]=f,t.exports=n["default"]},{"./content":2,"./date":3}],9:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var o=e("./index"),a=r(o),i=e("./page"),u=r(i),s=ReactRouter,l=s.Route;n["default"]={connect:function(e){var t=React.createElement(l,{handler:e,path:"/"},React.createElement(l,{path:"/",handler:a["default"]}),React.createElement(l,{path:"*",handler:u["default"]}));s.run(t,s.HistoryLocation,function(e){document.body.className="",React.render(React.createElement(e,null),document.body)})},Handler:s.RouteHandler},document.addEventListener("click",function(e){var t=e.target,n=t.getAttribute("href"),r=e.metaKey||e.altKey||e.ctrlKey||e.shiftKey;0!==e.button||r||"A"!==t.tagName||"/"!==n[0]||(e.preventDefault(),s.HistoryLocation.push(n))},!1),t.exports=n["default"]},{"./index":4,"./page":7}],10:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){function t(){r(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),a(t,[{key:"render",value:function(){return React.createElement("aside",null,React.createElement("section",{className:"about"},React.createElement("h3",null,"About the author"),React.createElement("img",{src:"/app/assets/author.jpg",className:"author"}),React.createElement("p",null,"Nikolay Nemshilov")),React.createElement("section",{className:"contacts"},React.createElement("h3",null,"Contacts"),React.createElement("p",null,React.createElement("a",{href:"https://twitter.com/nemshilov",target:"_blank"},"@nemshilov")," ",React.createElement("br",null),React.createElement("a",{href:"https://github.com/MadRabbit",target:"_blank"},"GitHub/MadRabbit"))))}}]),t}(React.Component);n["default"]=i,t.exports=n["default"]},{}],11:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,a=t,i=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,a);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(i)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=a,n=i,r=!0}},s=e("events"),l=e("../utils/request"),c=r(l),f=e("../utils/markdown"),p=r(f),h=function(e){function t(e){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this);for(var n in e)this[n]=e[n];this.extract=this.format(this.extract)}return a(t,e),i(t,[{key:"load",value:function(){new c["default"](this.file).get(function(e){this.body=this.format(e),this.emit("load")}.bind(this))}},{key:"format",value:function(e){return p["default"].format(e)}}]),t}(s.EventEmitter);n["default"]=h,t.exports=n["default"]},{"../utils/markdown":14,"../utils/request":15,events:16}],12:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e,t,n){for(var r=!0;r;){var o=e,a=t,i=n;u=l=s=void 0,r=!1;var u=Object.getOwnPropertyDescriptor(o,a);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(i)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;e=l,t=a,n=i,r=!0}},s=e("events"),l=e("../utils/request"),c=r(l),f=e("./page"),p=r(f),h=function(e){function t(){o(this,t),u(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.pages=null,this.load()}return a(t,e),i(t,[{key:"load",value:function(){new c["default"]("/sitemap.xml").get(function(e,t){var n=t.responseXML.querySelectorAll("url");this.pages=[].slice.call(n).map(function(e){return new p["default"](this.extractData(e))}.bind(this)),this.emit("load")}.bind(this))}},{key:"extractData",value:function(e){var t={path:(e.querySelector("loc")||{}).textContent,createdAt:(e.querySelector("lastmod")||{}).textContent,file:(e.querySelector("fileloc")||{}).textContent,tags:(e.querySelector("tags")||{}).textContent,title:(e.querySelector("title")||{}).textContent,extract:(e.querySelector("extract")||{}).textContent};try{t.path=t.path.split(".com").pop()}catch(n){}try{t.tags=t.tags.split(",")}catch(n){}try{t.createdAt=new Date(t.createdAt)}catch(n){}try{t.category=t.file.match(/\/pages\/(.+?)\//)[1]}catch(n){}return t}}],[{key:"inst",value:function(){return!this._inst&&(this._inst=new t),this._inst}},{key:"find",value:function(e){return this.inst().pages.filter(function(t){return t.path==e})[0]}},{key:"currentPage",value:function(){return this.find(document.location.pathname)}}]),t}(s.EventEmitter);n["default"]=h,t.exports=n["default"]},{"../utils/request":15,"./page":11,events:16}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]={title:"Nikolay.TheOsom",author:"Nikolay Nemshilov"},t.exports=n["default"]},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),marked.setOptions({renderer:new marked.Renderer,gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!0,smartLists:!0,smartypants:!1}),n["default"]={format:function(e){return marked(e)}},t.exports=n["default"]},{}],15:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){r(this,e),this.url=t}return o(e,[{key:"get",value:function(e){var t=new XMLHttpRequest;t.open("GET",this.url,!0),t.onreadystatechange=function(){4===this.readyState&&this.status>=200&&this.status<300&&e(this.responseText,this)},t.send()}},{key:"getJSON",value:function(e){this.get(function(t){e(JSON.parse(t))})}}]),e}();n["default"]=a,t.exports=n["default"]},{}],16:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function a(e){return"number"==typeof e}function i(e){return"object"==typeof e&&null!==e}function u(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!a(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,a,s,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(n=this._events[e],u(n))return!1;if(o(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:for(r=arguments.length,a=new Array(r-1),s=1;r>s;s++)a[s-1]=arguments[s];n.apply(this,a)}else if(i(n)){for(r=arguments.length,a=new Array(r-1),s=1;r>s;s++)a[s-1]=arguments[s];for(l=n.slice(),r=l.length,s=0;r>s;s++)l[s].apply(this,a)}return!0},r.prototype.addListener=function(e,t){var n;if(!o(t))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned){var n;n=u(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())}return this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function n(){this.removeListener(e,n),r||(r=!0,t.apply(this,arguments))}if(!o(t))throw TypeError("listener must be a function");var r=!1;return n.listener=t,this.on(e,n),this},r.prototype.removeListener=function(e,t){var n,r,a,u;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],a=n.length,r=-1,n===t||o(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(n)){for(u=a;u-->0;)if(n[u]===t||n[u].listener&&n[u].listener===t){r=u;break}if(0>r)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],o(n))this.removeListener(e,n);else for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.listenerCount=function(e,t){var n;return n=e._events&&e._events[t]?o(e._events[t])?1:e._events[t].length:0}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,