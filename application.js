!function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n?n:e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./stores/pages_store"),u=r(a),l=e("./components/layout"),c=r(l),f=new u["default"],h=function(e){function t(){i(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),s(t,[{key:"render",value:function(){return React.createElement(c["default"],{body:"Some body, anybody!",sidebar:"Sidebar"})}}]),t}(React.Component);f.on("change",function(){document.body.className="",React.render(React.createElement(h,null),document.body)})},{"./components/layout":2,"./stores/pages_store":5}],2:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e,t,n){for(var r=!0;r;){var i=e,o=t,s=n;a=l=u=void 0,r=!1;var a=Object.getOwnPropertyDescriptor(i,o);if(void 0!==a){if("value"in a)return a.value;var u=a.get;return void 0===u?void 0:u.call(s)}var l=Object.getPrototypeOf(i);if(null===l)return void 0;e=l,t=o,n=s,r=!0}},u=e("../stores/settings_store"),l=r(u),c=new l["default"],f=function(e){function t(){i(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.state={title:c.title,author:c.author}}return o(t,e),s(t,[{key:"render",value:function(){return document.title=this.state.title,React.createElement("body",null,React.createElement("header",null,React.createElement("div",{className:"paddings"},React.createElement("a",{href:"./",className:"logo"},"Nikolay.TheOsom"))),React.createElement("main",null,React.createElement("div",{className:"paddings"},React.createElement("article",null,React.createElement("h1",null,this.state.title),this.props.body),React.createElement("aside",null,this.props.sidebar))),React.createElement("footer",null,React.createElement("div",{className:"paddings"},React.createElement("p",null,"Copyright (C) 2012-",(new Date).getFullYear()," ",this.state.author))))}}]),t}(React.Component);n["default"]=f,t.exports=n["default"]},{"../stores/settings_store":6}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=e("./dispatcher"),u=r(a),l=function(e){function t(){i(this,t),null!=e&&e.apply(this,arguments)}return o(t,e),s(t,[{key:"handleViewAction",value:function(e){this.dispatch({source:"VIEW_ACTION",action:e})}}]),t}(u["default"]);n["default"]=l,t.exports=n["default"]},{"./dispatcher":4}],4:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){l.push(new Promise(function(n,r){e(t)?n(t):r(new Error("Dispatcher callback unsuccessful"))}))}function o(){l=[]}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(){r(this,e)}return s(e,[{key:"register",value:function(e){return u.push(e),u.length-1}},{key:"dispatch",value:function(e){u.forEach(function(t){i(t,e)}),Promise.all(l).then(o)}}]),e}();n["default"]=a;var u=[],l=[];t.exports=n["default"]},{}],5:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e,t,n){for(var r=!0;r;){var i=e,o=t,s=n;a=l=u=void 0,r=!1;var a=Object.getOwnPropertyDescriptor(i,o);if(void 0!==a){if("value"in a)return a.value;var u=a.get;return void 0===u?void 0:u.call(s)}var l=Object.getPrototypeOf(i);if(null===l)return void 0;e=l,t=o,n=s,r=!0}},u=e("../utils/request"),l=r(u),c=e("../dispatchers/app_dispatcher"),f=r(c),h=e("events"),p=(new f["default"],null),v=function(e){function t(){i(this,t),a(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.load()}return o(t,e),s(t,[{key:"load",value:function(){new l["default"]("/sitemap.xml").get(function(e,t){var n=t.responseXML.querySelectorAll("url");p=[].slice.call(n).map(function(e){return new d(e)}),this.emit("change")}.bind(this))}},{key:"allPages",value:function(){return p}}]),t}(h.EventEmitter);n["default"]=v;var d=function y(e){i(this,y),this.path=(e.querySelector("loc")||{}).textContent,this.createdAt=(e.querySelector("lastmod")||{}).textContent,this.file=(e.querySelector("fileloc")||{}).textContent,this.category=(e.querySelector("category")||{}).textContent,this.tags=(e.querySelector("tags")||{}).textContent;try{this.tags=this.tags.split(",")}catch(t){}try{this.createdAt=JSON.parse('"'+this.createdAt+'"')}catch(t){}};t.exports=n["default"]},{"../dispatchers/app_dispatcher":3,"../utils/request":7,events:8}],6:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function o(){r(this,o),this.title="Hello",this.author="Nikolay Nemshilov"};n["default"]=i,t.exports=n["default"]},{}],7:[function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.url=t}return i(e,[{key:"get",value:function(e){var t=new XMLHttpRequest;t.open("GET",this.url,!0),t.onreadystatechange=function(){4===this.readyState&&this.status>=200&&this.status<300&&e(this.responseText,this)},t.send()}},{key:"getJSON",value:function(e){this.get(function(t){e(JSON.parse(t))})}}]),e}();n["default"]=o,t.exports=n["default"]},{}],8:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return"function"==typeof e}function o(e){return"number"==typeof e}function s(e){return"object"==typeof e&&null!==e}function a(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!o(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,o,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||s(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(n=this._events[e],a(n))return!1;if(i(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:for(r=arguments.length,o=new Array(r-1),u=1;r>u;u++)o[u-1]=arguments[u];n.apply(this,o)}else if(s(n)){for(r=arguments.length,o=new Array(r-1),u=1;r>u;u++)o[u-1]=arguments[u];for(l=n.slice(),r=l.length,u=0;r>u;u++)l[u].apply(this,o)}return!0},r.prototype.addListener=function(e,t){var n;if(!i(t))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,i(t.listener)?t.listener:t),this._events[e]?s(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,s(this._events[e])&&!this._events[e].warned){var n;n=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())}return this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function n(){this.removeListener(e,n),r||(r=!0,t.apply(this,arguments))}if(!i(t))throw TypeError("listener must be a function");var r=!1;return n.listener=t,this.on(e,n),this},r.prototype.removeListener=function(e,t){var n,r,o,a;if(!i(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],o=n.length,r=-1,n===t||i(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(s(n)){for(a=o;a-->0;)if(n[a]===t||n[a].listener&&n[a].listener===t){r=a;break}if(0>r)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],i(n))this.removeListener(e,n);else for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.listenerCount=function(e,t){var n;return n=e._events&&e._events[t]?i(e._events[t])?1:e._events[t].length:0}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,